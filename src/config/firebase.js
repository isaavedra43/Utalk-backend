const { Firestore, FieldValue, Timestamp } = require('@google-cloud/firestore');
require('dotenv').config();

// ‚úÖ RAILWAY LOGGING: Inicio de inicializaci√≥n Firestore √∫nicamente
console.log('üî• FIRESTORE - Iniciando configuraci√≥n (SIN Firebase Auth)...');

// ‚úÖ DEBUG MODE: Mostrar variables de entorno (sin secretos)
console.log('üîç FIRESTORE - Variables de entorno detectadas:', {
  FIREBASE_PROJECT_ID: !!process.env.FIREBASE_PROJECT_ID,
  FIREBASE_PRIVATE_KEY: !!process.env.FIREBASE_PRIVATE_KEY,
  FIREBASE_CLIENT_EMAIL: !!process.env.FIREBASE_CLIENT_EMAIL,
  FIREBASE_PRIVATE_KEY_LENGTH: process.env.FIREBASE_PRIVATE_KEY ? process.env.FIREBASE_PRIVATE_KEY.length : 0,
  FIREBASE_PRIVATE_KEY_STARTS_WITH: process.env.FIREBASE_PRIVATE_KEY ? process.env.FIREBASE_PRIVATE_KEY.substring(0, 20) + '...' : 'MISSING',
});

// Configuraci√≥n del service account usando variables de entorno
const serviceAccount = {
  projectId: process.env.FIREBASE_PROJECT_ID,
  keyFilename: undefined, // Usaremos credentials en lugar de keyFilename
  credentials: {
    type: process.env.FIREBASE_TYPE || 'service_account',
    project_id: process.env.FIREBASE_PROJECT_ID,
    private_key_id: process.env.FIREBASE_PRIVATE_KEY_ID,
    private_key: process.env.FIREBASE_PRIVATE_KEY ? process.env.FIREBASE_PRIVATE_KEY.replace(/\\n/g, '\n') : undefined,
    client_email: process.env.FIREBASE_CLIENT_EMAIL,
    client_id: process.env.FIREBASE_CLIENT_ID,
    auth_uri: process.env.FIREBASE_AUTH_URI || 'https://accounts.google.com/o/oauth2/auth',
    token_uri: process.env.FIREBASE_TOKEN_URI || 'https://oauth2.googleapis.com/token',
    auth_provider_x509_cert_url: process.env.FIREBASE_AUTH_PROVIDER_X509_CERT_URL || 'https://www.googleapis.com/oauth2/v1/certs',
    client_x509_cert_url: process.env.FIREBASE_CLIENT_X509_CERT_URL,
  },
};

// ‚úÖ VERIFICACI√ìN CR√çTICA: Variables de entorno obligatorias para Firestore
const requiredEnvVars = [
  'FIREBASE_PROJECT_ID',
  'FIREBASE_PRIVATE_KEY',
  'FIREBASE_CLIENT_EMAIL',
];

console.log('üîç FIRESTORE - Verificando variables de entorno...');
const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
if (missingVars.length > 0) {
  console.error('‚ùå FIRESTORE - Variables faltantes:', missingVars);
  console.error('‚ùå FIRESTORE - El proyecto INTENTAR√Å continuar para debugging');
  // ‚úÖ NO MATAR LA APP - Solo logear el problema
}

// ‚úÖ VERIFICACI√ìN ADICIONAL: Formato de private key (sin matar app)
if (process.env.FIREBASE_PRIVATE_KEY && !process.env.FIREBASE_PRIVATE_KEY.includes('BEGIN PRIVATE KEY')) {
  console.error('‚ùå FIRESTORE - FIREBASE_PRIVATE_KEY parece tener formato incorrecto');
  console.error('‚ùå FIRESTORE - Debe incluir "-----BEGIN PRIVATE KEY-----"');
  console.error('‚ùå FIRESTORE - Continuando para debugging...');
  // ‚úÖ NO MATAR LA APP - Solo logear el problema
}

console.log('‚úÖ FIRESTORE - Variables de entorno verificadas (con warnings)');

// ‚úÖ INICIALIZACI√ìN ROBUSTA CON TRY/CATCH
let firestore;

try {
  // Inicializar Firestore directamente
  console.log('üî• FIRESTORE - Inicializando cliente Firestore...');

  // Configuraci√≥n para Firestore
  const firestoreConfig = {
    projectId: process.env.FIREBASE_PROJECT_ID,
  };

  // Solo agregar credentials si est√°n disponibles
  if (process.env.FIREBASE_PRIVATE_KEY && process.env.FIREBASE_CLIENT_EMAIL) {
    firestoreConfig.credentials = serviceAccount.credentials;
  }

  firestore = new Firestore(firestoreConfig);

  console.log('‚úÖ FIRESTORE - Cliente Firestore inicializado exitosamente');

  // ‚úÖ TEST DE CONECTIVIDAD OPCIONAL (sin bloquear)
  console.log('üîç FIRESTORE - Realizando test de conectividad...');
  firestore.collection('_health_check').limit(1).get()
    .then((snapshot) => {
      console.log('‚úÖ FIRESTORE - Conectividad confirmada, documentos encontrados:', snapshot.size);
    })
    .catch((connectError) => {
      console.log('‚ö†Ô∏è FIRESTORE - Test de conectividad fall√≥:', connectError.message);
      // No bloquear la inicializaci√≥n por esto
    });
} catch (initError) {
  console.error('‚ùå FIRESTORE - Error cr√≠tico en inicializaci√≥n:', initError.message);
  console.error('‚ùå FIRESTORE - Stack trace:', initError.stack);

  // Mostrar informaci√≥n espec√≠fica del error
  if (initError.message.includes('private_key')) {
    console.error('‚ùå FIRESTORE - Problema con FIREBASE_PRIVATE_KEY - verificar formato y escapes');
  }
  if (initError.message.includes('client_email')) {
    console.error('‚ùå FIRESTORE - Problema con FIREBASE_CLIENT_EMAIL - verificar service account');
  }
  if (initError.message.includes('project_id')) {
    console.error('‚ùå FIRESTORE - Problema con FIREBASE_PROJECT_ID - verificar proyecto');
  }

  console.error('‚ùå FIRESTORE - Creando instancia MOCK para debugging');

  // ‚úÖ CREAR MOCK PARA QUE LA APP NO CRASHEE
  firestore = {
    collection: () => ({
      limit: () => ({
        get: () => Promise.reject(new Error('Firestore no inicializado')),
      }),
      add: () => Promise.reject(new Error('Firestore no inicializado')),
      doc: () => ({
        get: () => Promise.reject(new Error('Firestore no inicializado')),
        set: () => Promise.reject(new Error('Firestore no inicializado')),
        update: () => Promise.reject(new Error('Firestore no inicializado')),
        delete: () => Promise.reject(new Error('Firestore no inicializado')),
      }),
      where: () => ({
        limit: () => ({
          get: () => Promise.reject(new Error('Firestore no inicializado')),
        }),
        where: () => ({
          limit: () => ({
            get: () => Promise.reject(new Error('Firestore no inicializado')),
          }),
        }),
      }),
    }),
  };

  console.log('‚ö†Ô∏è FIRESTORE - Mock creado - la app continuar√° pero Firestore NO funcionar√°');
}

console.log('üéâ FIRESTORE - Configuraci√≥n completada (con o sin errores)');

// ‚úÖ EXPORTAR SOLO FIRESTORE (NO m√°s Firebase Auth)
module.exports = {
  firestore,
  FieldValue,
  Timestamp,
};
