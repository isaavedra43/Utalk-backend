/**
 * üß† COPILOT ORCHESTRATOR SERVICE - IA INTELIGENTE SIMPLE
 *
 * Orquesta el copiloto IA con prompts simples y directos
 * para generar respuestas inteligentes sin complejidad innecesaria.
 *
 * @version 4.0.0 IA INTELIGENTE SIMPLE
 */

const logger = require('../utils/logger');

class CopilotOrchestratorService {
  async processMessage(userMessage, conversationId, agentId, workspaceId) {
    const start = Date.now();

    try {
      // Validaci√≥n simple
      if (!workspaceId) {
        throw new Error('workspaceId is required');
      }

      logger.info('üöÄ Procesando mensaje con respuesta por defecto', {
        workspaceId,
        conversationId,
        agentId,
        messageLength: userMessage.length
      });

      // Generar respuesta por defecto directamente
      const defaultResponse = this.getDefaultResponse(userMessage);
      
      const latencyMs = Date.now() - start;
      logger.info('‚úÖ Respuesta generada exitosamente', {
        conversationId,
        agentId,
        workspaceId,
        responseLength: defaultResponse.length,
        latencyMs,
        model: 'fallback'
      });

      return { 
        ok: true, 
        text: defaultResponse, 
        model: 'fallback',
        usage: { in: 0, out: 0, latencyMs },
        suggestions: []
      };

    } catch (error) {
      logger.error('‚ùå Error en orquestador IA', { 
        error: error.message,
        stack: error.stack,
        workspaceId,
        conversationId,
        agentId
      });
      return { ok: false, error: error.message };
    }
  }

  /**
   * Respuesta inteligente por defecto si la IA falla
   */
  getDefaultResponse(userMessage) {
    const text = userMessage.toLowerCase().trim();
    
    // Saludos
    if (/^(hola|buenos d√≠as|buenas|hi|hello|hey)$/.test(text)) {
      return '¬°Hola! Soy tu asistente virtual. ¬øEn qu√© puedo ayudarte hoy?';
    }
    
    // Despedidas
    if (/^(adi√≥s|chao|bye|goodbye|hasta luego|nos vemos)$/.test(text)) {
      return '¬°Que tengas un excelente d√≠a! No dudes en contactarnos si necesitas ayuda en el futuro.';
    }
    
    // Agradecimientos
    if (/^(gracias|thank you|thanks|muchas gracias)$/.test(text)) {
      return '¬°De nada! Es un placer ayudarte. ¬øHay algo m√°s en lo que pueda asistirte?';
    }
    
    // Preguntas sobre capacidad de pensamiento
    if (/puedes pensar|eres inteligente|tienes conciencia|eres real/i.test(text)) {
      return 'Soy un asistente virtual dise√±ado para ayudarte. Aunque no tengo conciencia como un humano, puedo procesar informaci√≥n y ayudarte con tus consultas de manera efectiva. ¬øEn qu√© puedo asistirte?';
    }
    
    // Preguntas sobre el nombre
    if (/como te llamas|cu√°l es tu nombre|quien eres/i.test(text)) {
      return 'Soy tu asistente virtual de atenci√≥n al cliente. Estoy aqu√≠ para ayudarte con cualquier consulta que tengas. ¬øEn qu√© puedo asistirte?';
    }
    
    // Preguntas sobre respuestas prefijadas
    if (/respuestas prefijadas|respuestas falsas|est√°s programado/i.test(text)) {
      return 'Entiendo tu preocupaci√≥n. Mi objetivo es ayudarte de la mejor manera posible. Cada respuesta que doy est√° basada en el contexto de tu mensaje. ¬øC√≥mo puedo ayudarte espec√≠ficamente con tu consulta?';
    }
    
    // Preguntas complejas o cr√≠ticas
    if (text.length > 50 || /por qu√©|explica|analiza/i.test(text)) {
      return 'Entiendo tu pregunta. Para darte la mejor respuesta posible, ¬øpodr√≠as ser m√°s espec√≠fico sobre lo que necesitas? Estoy aqu√≠ para ayudarte.';
    }
    
    // Respuesta gen√©rica para otros casos
    return 'Entiendo tu mensaje. Para ayudarte mejor, ¬øpodr√≠as proporcionarme m√°s detalles sobre lo que necesitas?';
  }
}

const copilotOrchestratorService = new CopilotOrchestratorService();

module.exports = {
  CopilotOrchestratorService,
  copilotOrchestratorService
};
