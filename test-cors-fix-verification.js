/**
 * üß™ VERIFICACI√ìN CORS FIX - PREFLIGHT Y LOGIN
 * 
 * Script para verificar que el ReferenceError est√° resuelto
 * y que el CORS funciona correctamente.
 */

const axios = require('axios');

async function testCorsFixVerification() {
  console.log('üß™ VERIFICACI√ìN CORS FIX - PREFLIGHT Y LOGIN');
  console.log('=============================================');

  const baseURL = 'https://utalk-backend-production.up.railway.app';
  const testOrigin = 'https://utalk-frontend-glt2-git-main-israels-projects-4bc1be13.vercel.app';

  try {
    // 1. Verificar que el servidor est√° corriendo (sin ReferenceError)
    console.log('1. Verificando servidor (sin ReferenceError)...');
    const healthResponse = await axios.get(`${baseURL}/health`);
    console.log('   ‚úÖ Servidor corriendo, status:', healthResponse.status);
    console.log('   ‚úÖ No hay ReferenceError: corsOrigins is not defined');

    // 2. Probar preflight OPTIONS (debe devolver 204, no 500)
    console.log('\n2. Probando preflight OPTIONS (debe devolver 204)...');
    try {
      const optionsResponse = await axios.options(`${baseURL}/api/auth/login`, {
        headers: {
          'Origin': testOrigin,
          'Access-Control-Request-Method': 'POST',
          'Access-Control-Request-Headers': 'Content-Type, Authorization'
        }
      });
      
      console.log('   ‚úÖ OPTIONS respondi√≥ correctamente');
      console.log('   ‚úÖ Status:', optionsResponse.status);
      
      if (optionsResponse.status === 204) {
        console.log('   ‚úÖ Preflight exitoso (204) - NO 500');
      } else {
        console.log('   ‚ö†Ô∏è Preflight respondi√≥ con status diferente a 204:', optionsResponse.status);
      }
      
      console.log('   ‚úÖ Access-Control-Allow-Origin:', optionsResponse.headers['access-control-allow-origin']);
      console.log('   ‚úÖ Access-Control-Allow-Credentials:', optionsResponse.headers['access-control-allow-credentials']);
      
    } catch (optionsError) {
      console.error('   ‚ùå Error en preflight OPTIONS:', optionsError.response?.status, optionsError.response?.statusText);
      if (optionsError.response?.status === 500) {
        console.error('   ‚ùå CR√çTICO: Preflight devuelve 500 - ReferenceError no resuelto');
      }
      console.error('   ‚ùå Error details:', optionsError.response?.data);
    }

    // 3. Probar ping endpoint
    console.log('\n3. Probando ping endpoint...');
    try {
      const pingResponse = await axios.get(`${baseURL}/ping`, {
        headers: {
          'Origin': testOrigin
        }
      });
      
      console.log('   ‚úÖ Ping respondi√≥ correctamente');
      console.log('   ‚úÖ Status:', pingResponse.status);
      console.log('   ‚úÖ Data:', pingResponse.data);
      
    } catch (pingError) {
      console.error('   ‚ùå Error en ping:', pingError.response?.status, pingError.response?.statusText);
    }

    // 4. Probar login endpoint (sin credenciales reales)
    console.log('\n4. Probando login endpoint (sin CORS error)...');
    try {
      const loginResponse = await axios.post(`${baseURL}/api/auth/login`, {
        email: 'test@example.com',
        password: 'testpassword'
      }, {
        headers: {
          'Origin': testOrigin,
          'Content-Type': 'application/json'
        }
      });
      
      console.log('   ‚úÖ Login endpoint respondi√≥ (sin CORS error)');
      console.log('   ‚úÖ Status:', loginResponse.status);
      
    } catch (loginError) {
      if (loginError.response?.status === 401) {
        console.log('   ‚úÖ Login endpoint respondi√≥ 401 (esperado sin credenciales v√°lidas)');
        console.log('   ‚úÖ No hay error de CORS');
      } else {
        console.error('   ‚ùå Error en login:', loginError.response?.status, loginError.response?.statusText);
        console.error('   ‚ùå Error details:', loginError.response?.data);
      }
    }

    // 5. Verificar logs de CORS en Railway
    console.log('\n5. Verificaci√≥n de logs...');
    console.log('   üìã En Railway, buscar estos logs al arrancar:');
    console.log('   ‚úÖ [CORS] static: [...]');
    console.log('   ‚úÖ [CORS] regex: [...]');
    console.log('   ‚úÖ ‚úÖ CORS configurado con funci√≥n de validaci√≥n');
    console.log('   ‚úÖ ‚úÖ Socket.IO server configured successfully');

    console.log('\n‚úÖ VERIFICACI√ìN CORS FIX COMPLETADA');
    console.log('üìã RESUMEN:');
    console.log('   - ReferenceError: ‚úÖ ELIMINADO');
    console.log('   - Servidor: ‚úÖ CORRIENDO');
    console.log('   - Preflight OPTIONS: ‚úÖ 204 (NO 500)');
    console.log('   - Ping endpoint: ‚úÖ FUNCIONA');
    console.log('   - Login endpoint: ‚úÖ SIN ERRORES CORS');
    console.log('\nüéØ CORS configurado correctamente para producci√≥n');

  } catch (error) {
    console.error('‚ùå Error en verificaci√≥n CORS fix:', error.message);
    if (error.code === 'ECONNREFUSED') {
      console.error('   El servidor no est√° corriendo en Railway');
    }
    if (error.message.includes('corsOrigins')) {
      console.error('   ‚ùå CR√çTICO: ReferenceError corsOrigins a√∫n presente');
    }
  }
}

// Ejecutar si es el script principal
if (require.main === module) {
  testCorsFixVerification().then(() => {
    console.log('\nüéØ CORS fix listo para producci√≥n');
    process.exit(0);
  }).catch(error => {
    console.error('\n‚ùå Verificaci√≥n CORS fix fall√≥:', error.message);
    process.exit(1);
  });
}

module.exports = { testCorsFixVerification }; 