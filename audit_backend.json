{
  "audit_timestamp": "2024-08-08T14:30:00.000Z",
  "audit_version": "2.0.0",
  "audit_depth": "PROFUNDO_Y_DETALLADO",
  "pipeline_analysis": {
    "A1_inventory": {
      "global_middleware_order": [
        {
          "name": "helmet",
          "file": "src/index.js:397-407",
          "description": "Seguridad HTTP con configuración por entorno"
        },
        {
          "name": "compression",
          "file": "src/index.js:409-418",
          "description": "Compresión con filtros personalizados"
        },
        {
          "name": "setupCORS",
          "file": "src/index.js:420",
          "description": "CORS configurado por entorno"
        },
        {
          "name": "express.json",
          "file": "src/index.js:422-432",
          "description": "Parsing JSON con límite 10mb y rawBody para webhooks"
        },
        {
          "name": "express.urlencoded",
          "file": "src/index.js:434-440",
          "description": "Parsing URL encoded con límites"
        },
        {
          "name": "correlationMiddleware",
          "file": "src/index.js:442",
          "description": "RequestId/traceId y construcción de req.logger unificado"
        },
        {
          "name": "security_headers",
          "file": "src/index.js:444-456",
          "description": "Headers de seguridad adicionales"
        },
        {
          "name": "trust_proxy",
          "file": "src/index.js:458-460",
          "description": "Trust proxy para load balancers en producción"
        }
      ],
      "api_specific_middleware": [
        {
          "name": "rateLimitManager.createGeneralLimiter",
          "file": "src/index.js:469",
          "description": "Rate limiting general para /api"
        },
        {
          "name": "databaseLoggingMiddleware",
          "file": "src/index.js:758",
          "description": "Logging de base de datos para /api"
        }
      ],
      "route_specific_pipelines": {
        "GET_api_conversations": {
          "router_file": "src/routes/conversations.js:67-72",
          "middleware_chain": [
            "correlationMiddleware (global)",
            "rateLimitManager.createGeneralLimiter (/api)",
            "databaseLoggingMiddleware (/api)",
            "authMiddleware",
            "requireReadAccess",
            "conversationValidators.validateList",
            "ConversationController.listConversations"
          ],
          "controller_location": "src/controllers/ConversationController.js:51-252",
          "validation_schema": "src/routes/conversations.js:40-50"
        },
        "POST_api_messages_webhook": {
          "router_file": "src/routes/messages.js:128-132",
          "middleware_chain": [
            "correlationMiddleware (global)",
            "rateLimitManager.createGeneralLimiter (/api)",
            "databaseLoggingMiddleware (/api)",
            "messageValidators.validateWebhook",
            "MessageController.handleWebhookSafe"
          ],
          "controller_location": "src/controllers/MessageController.js:593-840",
          "validation_schema": "src/routes/messages.js:42-56"
        }
      },
      "diagnostic_log": {
        "location": "src/index.js:770-785",
        "event": "pipelines.ok",
        "content": "Secuencia completa de middlewares por ruta"
      }
    }
  },
  "query_analysis": {
    "A2_effective_query": {
      "collection_configuration": {
        "path": "conversations",
        "source": "src/repositories/ConversationsRepository.js:41",
        "env_override": "CONVERSATIONS_COLLECTION_PATH"
      },
      "repository_flags": {
        "TENANT_MODE": {
          "source": "src/repositories/ConversationsRepository.js:42",
          "description": "Habilita filtros por workspaceId/tenantId"
        },
        "LEGACY_COMPAT": {
          "source": "src/repositories/ConversationsRepository.js:43",
          "description": "Compatibilidad con docs sin workspaceId/tenantId"
        },
        "LOG_CONV_DIAG": {
          "source": "src/repositories/ConversationsRepository.js:207",
          "description": "Habilita logs detallados de queries"
        }
      },
      "query_builder": {
        "method": "buildQuery",
        "file": "src/repositories/ConversationsRepository.js:53-115",
        "where_filters": [
          {
            "field": "workspaceId",
            "op": "==",
            "value_source": "req.user.workspaceId",
            "conditional": true,
            "file": "src/repositories/ConversationsRepository.js:65-67",
            "description": "Filtro por workspace del usuario autenticado"
          },
          {
            "field": "tenantId",
            "op": "==",
            "value_source": "req.user.tenantId",
            "conditional": true,
            "file": "src/repositories/ConversationsRepository.js:69-71",
            "description": "Filtro por tenant del usuario autenticado"
          },
          {
            "field": "status",
            "op": "==",
            "value_source": "filters.status (si != 'all')",
            "conditional": true,
            "file": "src/repositories/ConversationsRepository.js:73-75",
            "description": "Filtro opcional por estado de conversación"
          },
          {
            "field": "assignedTo",
            "op": "==",
            "value_source": "filters.assignedTo",
            "conditional": true,
            "file": "src/repositories/ConversationsRepository.js:77-79",
            "description": "Filtro opcional por agente asignado"
          },
          {
            "field": "participants",
            "op": "array-contains",
            "value_source": "req.user.email",
            "conditional": true,
            "file": "src/repositories/ConversationsRepository.js:81-83",
            "description": "Filtro crítico: email del usuario debe estar en participants"
          }
        ],
        "ordering": {
          "field": "lastMessageAt",
          "direction": "desc",
          "file": "src/repositories/ConversationsRepository.js:85"
        },
        "pagination": {
          "limit": "pagination.limit (default: 50)",
          "cursor": "pagination.cursor (opcional)",
          "file": "src/repositories/ConversationsRepository.js:87-92"
        }
      },
      "diagnostic_logs": {
        "pre_query": {
          "event": "list.query_shape",
          "file": "src/repositories/ConversationsRepository.js:207-230",
          "content": "wheres[], orderBy, limit, indexHint"
        },
        "post_query": {
          "event": "conversations_diag",
          "file": "src/repositories/ConversationsRepository.js:232-245",
          "content": "snapshotSize, duration, hasNext"
        }
      }
    }
  },
  "writing_analysis": {
    "A3_inbound_flow": {
      "route_chain": [
        "src/routes/messages.js:128-132",
        "src/controllers/MessageController.js:593-840",
        "src/services/MessageService.js:222-321",
        "src/repositories/ConversationsRepository.js:324-535"
      ],
      "message_construction": {
        "file": "src/services/MessageService.js:280-300",
        "fields": {
          "conversationId": "generateConversationId(fromPhone, toPhone)",
          "messageId": "MSG_${timestamp}_${random}",
          "content": "Body || ''",
          "type": "'text'",
          "direction": "'inbound'",
          "senderIdentifier": "fromPhone (normalizado)",
          "recipientIdentifier": "toPhone (normalizado)",
          "agentEmail": "routingAgentEmail (del resolver)",
          "timestamp": "new Date()",
          "workspaceId": "routingWorkspaceId (del resolver)",
          "tenantId": "routingTenantId (del resolver)",
          "metadata": {
            "twilioSid": "MessageSid",
            "routingResolved": "objeto con wsPresent, tenPresent, agentEmailPresent"
          }
        }
      },
      "workspace_tenant_resolution": {
        "primary_source": "resolveRouting() from src/config/twilioRouting.js",
        "fallback_chain": [
          "process.env.WORKSPACE_ID",
          "process.env.DEFAULT_WORKSPACE_ID",
          "'default_workspace'"
        ],
        "tenant_chain": [
          "process.env.TENANT_ID",
          "process.env.DEFAULT_TENANT_ID", 
          "'default_tenant'"
        ],
        "agent_email_chain": [
          "process.env.DEFAULT_AGENT_EMAIL",
          "'system@utalk.local'"
        ],
        "file": "src/services/MessageService.js:250-260"
      },
      "conversation_update": {
        "file": "src/repositories/ConversationsRepository.js:440-450",
        "participants_construction": {
          "existing_participants": "conversationDoc.data().participants || []",
          "new_participants": [
            "msg.senderIdentifier (teléfono cliente)",
            "msg.agentEmail (si viene del resolver)"
          ],
          "deduplication": "Set para eliminar duplicados",
          "final_array": "Array.from(participantsSet)"
        },
        "fields_updated": [
          "lastMessage (objeto con messageId, content, sender, direction, timestamp)",
          "lastMessageAt (timestamp del mensaje)",
          "messageCount (FieldValue.increment(1))",
          "unreadCount (FieldValue.increment(1))",
          "participants (array con teléfono + email agente)",
          "updatedAt (new Date())"
        ],
        "tenant_fields": {
          "workspaceId": "msg.workspaceId (si presente)",
          "tenantId": "msg.tenantId (si presente)"
        }
      },
      "idempotency": {
        "mechanism": "por messageId",
        "file": "src/repositories/ConversationsRepository.js:390-400",
        "description": "Verifica si mensaje ya existe antes de escribir"
      },
      "diagnostic_logs": {
        "shape_inbound": {
          "event": "write.shape_inbound",
          "file": "src/services/MessageService.js:270-280",
          "content": "routingResolved con wsPresent, tenPresent, agentEmailPresent"
        },
        "msg_inbound_ok": {
          "event": "msg_inbound_ok",
          "file": "src/repositories/ConversationsRepository.js:490-500",
          "content": "actualización exitosa con participants, unreadCount, messageCount"
        }
      }
    },
    "A3_outbound_flow": {
      "route_chain": [
        "src/routes/messages.js:108-118",
        "src/controllers/MessageController.js:288-387",
        "src/repositories/ConversationsRepository.js:536-750"
      ],
      "message_construction": {
        "file": "src/controllers/MessageController.js:340-360",
        "fields": {
          "conversationId": "conversation.id",
          "messageId": "MSG_${timestamp}_${random}",
          "content": "content.trim()",
          "type": "mediaUrl ? 'media' : type",
          "direction": "'outbound'",
          "senderIdentifier": "req.user.email",
          "recipientIdentifier": "targetPhone",
          "timestamp": "new Date()",
          "workspaceId": "req.user.workspaceId",
          "tenantId": "req.user.tenantId",
          "metadata": {
            "sentBy": "req.user.email",
            "sentAt": "new Date().toISOString()",
            "attachments": "fileMetadata array"
          }
        }
      },
      "conversation_update": {
        "file": "src/repositories/ConversationsRepository.js:660-670",
        "participants_construction": {
          "existing_participants": "conversationDoc.data().participants || []",
          "new_participants": [
            "msg.senderIdentifier (email agente)",
            "msg.recipientIdentifier (teléfono cliente)",
            "msg.agentEmail (si presente)"
          ],
          "deduplication": "Set para eliminar duplicados",
          "final_array": "Array.from(participantsSet)"
        },
        "fields_updated": [
          "lastMessage (objeto con messageId, content, sender, direction, timestamp)",
          "lastMessageAt (timestamp del mensaje)",
          "messageCount (FieldValue.increment(1))",
          "participants (array con email agente + teléfono cliente)",
          "updatedAt (new Date())"
        ],
        "tenant_fields": {
          "workspaceId": "msg.workspaceId (si presente)",
          "tenantId": "msg.tenantId (si presente)"
        }
      },
      "diagnostic_logs": {
        "message_write_success": {
          "event": "message_write_success",
          "file": "src/repositories/ConversationsRepository.js:700-710",
          "content": "escritura exitosa con participants actualizados"
        }
      }
    }
  },
  "logger_analysis": {
    "A4_runtime_logger": {
      "construction_sources": [
        {
          "name": "correlationMiddleware",
          "file": "src/middleware/correlation.js:15-50",
          "description": "Winston child con requestId/traceId y accessor getter/setter"
        },
        {
          "name": "databaseLoggingMiddleware",
          "file": "src/middleware/logging.js:196-320",
          "description": "Inyección de métodos de dominio sobre logger existente"
        }
      ],
      "unification_mechanism": {
        "file": "src/utils/requestLogger.js:1-76",
        "function": "buildRequestLogger",
        "cases": [
          {
            "case": "existing es Winston",
            "action": "child con contexto + copiar métodos de dominio"
          },
          {
            "case": "existing es de dominio",
            "action": "construir std + mezclar métodos de dominio"
          },
          {
            "case": "no existing",
            "action": "baseLogger.child(context)"
          }
        ]
      },
      "final_shape": {
        "hasInfo": "boolean (Winston child)",
        "hasChild": "boolean (Winston child)",
        "hasDatabase": "boolean (método de dominio)",
        "hasAuth": "boolean (método de dominio)",
        "hasMessage": "boolean (método de dominio)",
        "hasMedia": "boolean (método de dominio)",
        "hasTwilio": "boolean (método de dominio)",
        "hasSocket": "boolean (método de dominio)",
        "hasSecurity": "boolean (método de dominio)",
        "hasSuccess": "boolean (método de dominio)"
      },
      "diagnostic_log": {
        "event": "logger.shape",
        "file": "src/controllers/ConversationController.js:75-85",
        "content": "objeto con hasInfo, hasAuth, hasDatabase, hasChild"
      }
    }
  },
  "routing_analysis": {
    "A5_variables_routing": {
      "twilio_routing_file": {
        "path": "src/config/twilioRouting.js:1-59",
        "function": "resolveRouting",
        "parameters": "{ toPhone, fromPhone }",
        "return_type": "{ workspaceId?, tenantId?, agentEmail? } | null"
      },
      "config_json_status": {
        "exists": false,
        "expected_path": "config/twilioRouting.json",
        "fallback": "ENV variables"
      },
      "env_dependencies": {
        "WORKSPACE_ID": {
          "source": "src/config/twilioRouting.js:35",
          "fallback": "DEFAULT_WORKSPACE_ID"
        },
        "TENANT_ID": {
          "source": "src/config/twilioRouting.js:36",
          "fallback": "DEFAULT_TENANT_ID"
        },
        "DEFAULT_AGENT_EMAIL": {
          "source": "src/config/twilioRouting.js:37",
          "fallback": "null"
        }
      },
      "resolution_logic": {
        "step_1": "Intentar por archivo de configuración (normalizado)",
        "step_2": "Intentar por archivo de configuración (sin normalizar)",
        "step_3": "Fallback por ENV simples",
        "step_4": "Retornar null si no hay datos"
      },
      "diagnostic_log": {
        "event": "write.shape_inbound",
        "file": "src/services/MessageService.js:270-280",
        "content": "routingResolved con wsPresent, tenPresent, agentEmailPresent"
      }
    }
  },
  "firestore_samples": {
    "A6_readonly_samples": {
      "status": "NO_EJECUTADO",
      "reason": "Solo análisis de código, no queries de muestra",
      "collection_target": "conversations",
      "sample_size": "N=5 docs más recientes",
      "filters": "workspaceId/tenantId si están activos",
      "pii_masking": "emails/teléfonos enmascarados"
    }
  },
  "alignment_matrix": {
    "A7_reading_vs_data": {
      "participants": {
        "reading_requires": "array-contains userEmail (normalizado)",
        "writing_includes": {
          "inbound": "teléfono cliente + email agente (si viene del resolver)",
          "outbound": "email agente + teléfono cliente + email agente (si presente)"
        },
        "status": "CONDICIONAL",
        "explanation": "Depende de si agentEmail se incluye en inbound"
      },
      "workspaceId": {
        "reading_requires": "workspaceId == req.user.workspaceId",
        "writing_sets": {
          "inbound": "desde resolver/ENV",
          "outbound": "desde req.user"
        },
        "status": "CONDICIONAL",
        "explanation": "Depende de si resolver/ENV coincide con req.user"
      },
      "tenantId": {
        "reading_requires": "tenantId == req.user.tenantId",
        "writing_sets": {
          "inbound": "desde resolver/ENV",
          "outbound": "desde req.user"
        },
        "status": "CONDICIONAL",
        "explanation": "Depende de si resolver/ENV coincide con req.user"
      },
      "lastMessageAt": {
        "reading_requires": "presente para orderBy",
        "writing_sets": "siempre en inbound/outbound",
        "status": "PASS"
      },
      "status": {
        "reading_requires": "opcional (si != 'all')",
        "writing_sets": "siempre en inbound/outbound",
        "status": "PASS"
      }
    }
  },
  "indexes_rules": {
    "A8_firestore_coverage": {
      "required_combinations": [
        {
          "index": "workspaceId + lastMessageAt desc",
          "file": "firestore.indexes.json:3-9",
          "usage": "Query principal con workspaceId"
        },
        {
          "index": "workspaceId + status + lastMessageAt desc",
          "file": "firestore.indexes.json:10-16",
          "usage": "Query con filtro de estado"
        },
        {
          "index": "participants array-contains + lastMessageAt desc",
          "file": "firestore.indexes.json:17-23",
          "usage": "Query con filtro de participantes"
        },
        {
          "index": "workspaceId + assignedTo + lastMessageAt desc",
          "file": "firestore.indexes.json:24-30",
          "usage": "Query con filtro de asignación"
        }
      ],
      "rules_relevant": {
        "conversations_read": {
          "file": "firestore.rules:45",
          "rule": "canReadDoc(resource.data)"
        },
        "messages_read": {
          "file": "firestore.rules:58",
          "rule": "canReadDoc(get(/databases/$(database)/documents/conversations/$(conversationId)).data)"
        },
        "client_writes_blocked": {
          "file": "firestore.rules:47, 62",
          "rule": "allow create, update, delete: if false"
        }
      },
      "index_hint_logging": {
        "event": "list.query_shape",
        "file": "src/repositories/ConversationsRepository.js:225-230",
        "content": "indexHint con primary y withStatus"
      }
    }
  }
} 