rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    /* ─────────── Helpers de autenticación/tenant ─────────── */
    function isSignedIn() {
      return request.auth != null;
    }

    function has(field) {
      return request.auth != null && field in request.auth.token;
    }

    function token(field) {
      return request.auth.token[field];
    }

    function sameWorkspace(resourceData) {
      return has('workspaceId') && resourceData.workspaceId == token('workspaceId');
    }

    // Si no usas tenant mode, esta función permitirá todo tenant por defecto.
    function sameTenant(resourceData) {
      return !has('tenantId') || resourceData.tenantId == token('tenantId');
    }

    function canReadDoc(resourceData) {
      return isSignedIn() && sameWorkspace(resourceData) && sameTenant(resourceData);
    }

    function isAdmin() {
      return has('role') && (token('role') == 'admin' || token('role') == 'owner');
    }

    function isAgent() {
      return has('role') && (token('role') == 'agent' || isAdmin());
    }

    // Bandera opcional por si algún día permites escritura cliente de mensajes outbound (NO activarla por ahora).
    function clientMessageWriteEnabled() {
      return has('canClientWriteMessages') && request.auth.token.canClientWriteMessages == true;
    }

    /* ─────────── Reglas de dominio: conversations ─────────── */
    match /conversations/{conversationId} {

      // Lectura: cualquier usuario autenticado con el mismo workspace/tenant del doc.
      allow get, list, read: if canReadDoc(resource.data);

      // Escrituras desde cliente: BLOQUEADAS. Backend (Admin SDK) ya escribe y omite reglas.
      allow create, update, delete: if false;

      /* ───── Subcolección: messages ───── */
      match /messages/{messageId} {

        // Lectura de mensajes: validar contra el doc padre para scoping correcto.
        allow get, list, read: if canReadDoc(
          get(/databases/$(database)/documents/conversations/$(conversationId)).data
        );

        // Escrituras desde cliente: BLOQUEADAS por defecto.
        allow create, update, delete: if false;

        /*
        // OPCIONAL (DESACTIVADO): permitir creación de mensajes outbound desde cliente
        // SOLO si habilitas clientMessageWriteEnabled() y cumples todas las condiciones.
        // Descomenta, revisa y adapta cuidadosamente si lo necesitas.
        allow create: if clientMessageWriteEnabled()
          && isAgent()
          && canReadDoc(get(/databases/$(database)/documents/conversations/$(conversationId)).data)
          && request.resource.data.conversationId == conversationId
          && request.resource.data.direction == 'outbound'
          // Evita spoof de workspace/tenant: el servidor los pone; el cliente NO.
          && !('workspaceId' in request.resource.data)
          && !('tenantId' in request.resource.data)
          // Un poco de frescura temporal del timestamp (opcional endurecer/relajar):
          && request.resource.data.timestamp <= request.time + duration.value(5, 'minutes');
        */
      }
    }

    /* ─────────── Denegar todo lo demás por defecto ─────────── */
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 