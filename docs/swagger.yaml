openapi: 3.0.3
info:
  title: UTalk/Funday Backend API
  description: |
    API completa para la aplicación UTalk/Funday que incluye:
    - Autenticación con Firebase Auth
    - Gestión de contactos con tags y campos personalizados
    - Mensajería bidireccional con Twilio WhatsApp
    - Campañas de marketing automatizadas
    - Base de conocimiento con documentos y FAQs
    - Dashboard con métricas y analytics
    - Gestión de equipo y roles

    ## Autenticación
    Todas las rutas protegidas requieren un token Bearer JWT de Firebase Auth en el header:
    ```
    Authorization: Bearer <firebase_jwt_token>
    ```

    ## Roles de Usuario
    - **admin**: Acceso completo a todas las funcionalidades
    - **agent**: Puede gestionar contactos, enviar mensajes y crear campañas
    - **viewer**: Solo lectura en la mayoría de módulos
  version: 1.0.0
  contact:
    name: Funday Team
    email: support@funday.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://utalk-backend.railway.app
    description: Servidor de producción
  - url: https://utalk-backend-staging.railway.app
    description: Servidor de staging
  - url: http://localhost:3000
    description: Servidor de desarrollo local

tags:
  - name: auth
    description: Autenticación y gestión de sesiones
  - name: contacts
    description: Gestión de contactos y datos de clientes
  - name: messages
    description: Mensajería WhatsApp y comunicación
  - name: conversations
    description: Gestión de conversaciones y chat en tiempo real
  - name: campaigns
    description: Campañas de marketing y envío masivo
  - name: knowledge
    description: Base de conocimiento y documentación
  - name: media
    description: Archivos multimedia y gestión de contenido
  - name: realtime
    description: Comunicación en tiempo real con Socket.IO
  - name: dashboard
    description: Métricas y analytics del sistema
  - name: team
    description: Gestión de equipo y usuarios

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Token JWT de Firebase Auth

  schemas:
    User:
      type: object
      properties:
        uid:
          type: string
          description: ID único del usuario
        email:
          type: string
          format: email
        displayName:
          type: string
        role:
          type: string
          enum: [admin, agent, viewer]
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        lastLoginAt:
          type: string
          format: date-time

    Contact:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        phone:
          type: string
        email:
          type: string
          format: email
        tags:
          type: array
          items:
            type: string
        customFields:
          type: object
          additionalProperties: true
        notes:
          type: string
        isActive:
          type: boolean
        userId:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        lastContactAt:
          type: string
          format: date-time

    Message:
      type: object
      required:
        - id
        - conversationId
        - content
        - type
        - timestamp
        - sender
        - direction
        - isRead
        - isDelivered
      properties:
        id:
          type: string
          description: ID único del mensaje
          example: "msg_12345"
        conversationId:
          type: string
          description: ID único de la conversación
          example: "conv_1234567890_0987654321"
        content:
          type: string
          description: Texto del mensaje
          example: "Hola, necesito ayuda con mi pedido"
        type:
          type: string
          enum: [text, image, file, audio, video, document]
          description: Tipo de mensaje
          example: "text"
        timestamp:
          type: string
          format: date-time
          description: Timestamp en formato ISO 8601
          example: "2024-01-15T10:30:00.000Z"
        sender:
          type: object
          required:
            - id
            - name
            - type
          properties:
            id:
              type: string
              description: ID del remitente (puede ser teléfono para clientes)
              example: "+1234567890"
            name:
              type: string
              description: Nombre del remitente
              example: "Juan Pérez"
            type:
              type: string
              enum: [contact, agent, bot]
              description: Tipo de remitente
              example: "contact"
            avatar:
              type: string
              nullable: true
              description: URL del avatar del remitente
              example: null
        direction:
          type: string
          enum: [inbound, outbound]
          description: Dirección del mensaje
          example: "inbound"
        attachments:
          type: array
          description: Archivos adjuntos
          items:
            type: object
            properties:
              id:
                type: string
                example: "media_001"
              name:
                type: string
                example: "foto.jpg"
              url:
                type: string
                example: "https://example.com/media/foto.jpg"
              type:
                type: string
                example: "image/jpeg"
              size:
                type: number
                nullable: true
                example: 12345
        isRead:
          type: boolean
          description: Si el mensaje ha sido leído
          example: true
        isDelivered:
          type: boolean
          description: Si el mensaje ha sido entregado
          example: true
        metadata:
          type: object
          description: Información adicional opcional
          properties:
            twilioSid:
              type: string
              nullable: true
              example: "SM1234567890abcdef"
            userId:
              type: string
              nullable: true
              example: "user_12345"
            from:
              type: string
              example: "+1234567890"
            to:
              type: string
              example: "+0987654321"
            status:
              type: string
              example: "delivered"

    Campaign:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        message:
          type: string
        contacts:
          type: array
          items:
            type: string
        status:
          type: string
          enum: [draft, scheduled, sending, completed, paused, cancelled]
        scheduledAt:
          type: string
          format: date-time
        createdBy:
          type: string
        sentCount:
          type: integer
        deliveredCount:
          type: integer
        failedCount:
          type: integer
        openedCount:
          type: integer
        clickedCount:
          type: integer
        estimatedReach:
          type: integer
        budget:
          type: number
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time

    Knowledge:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        content:
          type: string
        category:
          type: string
        tags:
          type: array
          items:
            type: string
        type:
          type: string
          enum: [article, faq, video, document]
        isPublic:
          type: boolean
        isPinned:
          type: boolean
        fileUrl:
          type: string
        fileName:
          type: string
        fileSize:
          type: integer
        mimeType:
          type: string
        views:
          type: integer
        helpful:
          type: integer
        notHelpful:
          type: integer
        rating:
          type: number
        ratingCount:
          type: integer
        createdBy:
          type: string
        lastModifiedBy:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        hasNext:
          type: boolean
        hasPrev:
          type: boolean

    Conversation:
      type: object
      required:
        - id
        - contact
        - status
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          description: ID único de la conversación
          example: "conv_001_002"
        contact:
          type: object
          required:
            - id
            - name
            - channel
          properties:
            id:
              type: string
              description: ID del contacto
              example: "+1234567890"
            name:
              type: string
              description: Nombre del contacto
              example: "Cliente X"
            avatar:
              type: string
              nullable: true
              description: URL del avatar del contacto
              example: null
            channel:
              type: string
              description: Canal de comunicación
              example: "whatsapp"
        lastMessage:
          $ref: '#/components/schemas/Message'
          nullable: true
          description: Último mensaje de la conversación
        status:
          type: string
          enum: [open, closed, pending, archived]
          description: Estado de la conversación
          example: "open"
        assignedTo:
          type: object
          nullable: true
          description: Agente asignado a la conversación
          properties:
            id:
              type: string
              example: "user_123"
            name:
              type: string
              example: "Agente 1"
        createdAt:
          type: string
          format: date-time
          description: Fecha de creación en formato ISO 8601
          example: "2024-01-15T10:30:00.000Z"
        updatedAt:
          type: string
          format: date-time
          description: Fecha de última actualización en formato ISO 8601
          example: "2024-01-15T11:00:00.000Z"

    MessageListResponse:
      type: object
      required:
        - messages
        - total
        - page
        - limit
      properties:
        messages:
          type: array
          description: Array de mensajes (NUNCA "data", "result", etc.)
          items:
            $ref: '#/components/schemas/Message'
        total:
          type: integer
          description: Número total de mensajes en esta respuesta
          example: 25
        page:
          type: integer
          description: Página actual
          example: 1
        limit:
          type: integer
          description: Límite por página
          example: 50

    ConversationListResponse:
      type: object
      required:
        - conversations
        - total
        - page
        - limit
      properties:
        conversations:
          type: array
          description: Array de conversaciones
          items:
            $ref: '#/components/schemas/Conversation'
        total:
          type: integer
          description: Número total de conversaciones
          example: 10
        page:
          type: integer
          description: Página actual
          example: 1
        limit:
          type: integer
          description: Límite por página
          example: 50

security:
  - BearerAuth: []

paths:
  # =============== AUTH ENDPOINTS ===============
  /auth/login:
    post:
      tags: [auth]
      summary: Iniciar sesión
      description: Autenticar usuario con email y contraseña usando Firebase Auth
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
              example:
                email: admin@funday.com
                password: password123
      responses:
        '200':
          description: Login exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
        '400':
          description: Datos inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Credenciales incorrectas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      tags: [auth]
      summary: Cerrar sesión
      description: Cerrar la sesión activa del usuario
      responses:
        '200':
          description: Logout exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Sesión cerrada exitosamente

  /auth/profile:
    get:
      tags: [auth]
      summary: Obtener perfil del usuario
      description: Obtener información del perfil del usuario autenticado
      responses:
        '200':
          description: Perfil obtenido exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'

  # =============== CONTACTS ENDPOINTS ===============
  /contacts:
    get:
      tags: [contacts]
      summary: Listar contactos
      description: Obtener lista paginada de contactos con filtros opcionales
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: search
          in: query
          schema:
            type: string
          description: Buscar por nombre, teléfono o email
        - name: tags
          in: query
          schema:
            type: array
            items:
              type: string
          description: Filtrar por tags
        - name: isActive
          in: query
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Lista de contactos obtenida exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  contacts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Contact'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags: [contacts]
      summary: Crear contacto
      description: Crear un nuevo contacto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, phone]
              properties:
                name:
                  type: string
                phone:
                  type: string
                email:
                  type: string
                  format: email
                tags:
                  type: array
                  items:
                    type: string
                customFields:
                  type: object
                notes:
                  type: string
              example:
                name: Juan Pérez
                phone: "+1234567890"
                email: juan@example.com
                tags: ["cliente", "vip"]
                customFields:
                  empresa: Acme Corp
                  cargo: Manager
      responses:
        '201':
          description: Contacto creado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  contact:
                    $ref: '#/components/schemas/Contact'
        '400':
          description: Datos inválidos o teléfono duplicado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /contacts/{id}:
    get:
      tags: [contacts]
      summary: Obtener contacto por ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Contacto obtenido exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  contact:
                    $ref: '#/components/schemas/Contact'
        '404':
          description: Contacto no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags: [contacts]
      summary: Actualizar contacto
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                phone:
                  type: string
                email:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
                customFields:
                  type: object
                notes:
                  type: string
      responses:
        '200':
          description: Contacto actualizado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  contact:
                    $ref: '#/components/schemas/Contact'

    delete:
      tags: [contacts]
      summary: Eliminar contacto
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Contacto eliminado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /contacts/import/csv:
    post:
      tags: [contacts]
      summary: Importar contactos desde CSV
      description: Importar múltiples contactos desde un archivo CSV
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Importación completada
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  imported:
                    type: integer
                  errors:
                    type: array
                    items:
                      type: object

  /contacts/export/csv:
    get:
      tags: [contacts]
      summary: Exportar contactos a CSV
      responses:
        '200':
          description: Archivo CSV con contactos
          content:
            text/csv:
              schema:
                type: string

  # =============== MESSAGES ENDPOINTS ===============
  /messages:
    get:
      tags: [messages]
      summary: Listar mensajes
      description: Obtener lista paginada de mensajes con filtros
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: contactId
          in: query
          schema:
            type: string
        - name: direction
          in: query
          schema:
            type: string
            enum: [inbound, outbound]
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, sent, delivered, read, failed]
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Lista de mensajes obtenida exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /messages/send:
    post:
      tags: [messages]
      summary: Enviar mensaje
      description: Enviar un mensaje a un contacto vía WhatsApp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [contactId, content]
              properties:
                contactId:
                  type: string
                content:
                  type: string
                type:
                  type: string
                  enum: [text, image, document]
                  default: text
              example:
                contactId: "contact-123"
                content: "Hola, ¿cómo estás?"
                type: text
      responses:
        '201':
          description: Mensaje enviado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  messageRecord:
                    $ref: '#/components/schemas/Message'

  /messages/{id}:
    get:
      tags: [messages]
      summary: Obtener mensaje por ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Mensaje obtenido exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    allOf:
                      - $ref: '#/components/schemas/Message'
                      - type: object
                        properties:
                          contact:
                            $ref: '#/components/schemas/Contact'

  /messages/{id}/read:
    post:
      tags: [messages]
      summary: Marcar mensaje como leído
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Mensaje marcado como leído
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    $ref: '#/components/schemas/Message'

  /messages/conversation/{contactId}:
    get:
      tags: [messages]
      summary: Obtener conversación con contacto
      parameters:
        - name: contactId
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
      responses:
        '200':
          description: Conversación obtenida exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
                  contact:
                    $ref: '#/components/schemas/Contact'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /webhook/whatsapp:
    get:
      tags: [messages]
      summary: Verificar webhook de WhatsApp
      description: Endpoint para verificación de webhook de Twilio
      security: []
      parameters:
        - name: hub.mode
          in: query
          required: true
          schema:
            type: string
        - name: hub.verify_token
          in: query
          required: true
          schema:
            type: string
        - name: hub.challenge
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Verificación exitosa
          content:
            text/plain:
              schema:
                type: string

    post:
      tags: [messages]
      summary: Procesar webhook de WhatsApp
      description: Procesar mensajes entrantes y actualizaciones de estado
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Webhook procesado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success

  # =============== CAMPAIGNS ENDPOINTS ===============
  /campaigns:
    get:
      tags: [campaigns]
      summary: Listar campañas
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, scheduled, sending, completed, paused, cancelled]
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Lista de campañas obtenida exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  campaigns:
                    type: array
                    items:
                      $ref: '#/components/schemas/Campaign'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags: [campaigns]
      summary: Crear campaña
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, message, contacts]
              properties:
                name:
                  type: string
                message:
                  type: string
                contacts:
                  type: array
                  items:
                    type: string
                scheduledAt:
                  type: string
                  format: date-time
              example:
                name: "Campaña de Bienvenida"
                message: "¡Bienvenido a nuestro servicio!"
                contacts: ["contact-1", "contact-2"]
      responses:
        '201':
          description: Campaña creada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  campaign:
                    $ref: '#/components/schemas/Campaign'

  /campaigns/{id}:
    get:
      tags: [campaigns]
      summary: Obtener campaña por ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Campaña obtenida exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  campaign:
                    allOf:
                      - $ref: '#/components/schemas/Campaign'
                      - type: object
                        properties:
                          contactDetails:
                            type: array
                            items:
                              $ref: '#/components/schemas/Contact'

    put:
      tags: [campaigns]
      summary: Actualizar campaña
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                message:
                  type: string
                contacts:
                  type: array
                  items:
                    type: string
                scheduledAt:
                  type: string
                  format: date-time
      responses:
        '200':
          description: Campaña actualizada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  campaign:
                    $ref: '#/components/schemas/Campaign'

    delete:
      tags: [campaigns]
      summary: Eliminar campaña
      description: Solo administradores pueden eliminar campañas
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Campaña eliminada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /campaigns/{id}/send:
    post:
      tags: [campaigns]
      summary: Enviar campaña
      description: Ejecutar el envío de una campaña a todos los contactos
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Campaña enviada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  results:
                    type: object
                    properties:
                      total:
                        type: integer
                      sent:
                        type: integer
                      failed:
                        type: integer
                      details:
                        type: array
                        items:
                          type: object
                  campaign:
                    $ref: '#/components/schemas/Campaign'

  /campaigns/{id}/pause:
    post:
      tags: [campaigns]
      summary: Pausar campaña
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Campaña pausada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  campaign:
                    $ref: '#/components/schemas/Campaign'

  /campaigns/{id}/resume:
    post:
      tags: [campaigns]
      summary: Reanudar campaña
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Campaña reanudada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  campaign:
                    $ref: '#/components/schemas/Campaign'

  /campaigns/{id}/report:
    get:
      tags: [campaigns]
      summary: Obtener reporte de campaña
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: format
          in: query
          schema:
            type: string
            enum: [json, csv]
            default: json
      responses:
        '200':
          description: Reporte obtenido exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  campaign:
                    type: object
                  summary:
                    type: object
                  details:
                    type: array
                  contacts:
                    type: array
            text/csv:
              schema:
                type: string

  # =============== KNOWLEDGE ENDPOINTS ===============
  /knowledge:
    get:
      tags: [knowledge]
      summary: Listar documentos de conocimiento
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: category
          in: query
          schema:
            type: string
        - name: type
          in: query
          schema:
            type: string
            enum: [article, faq, video, document]
        - name: tags
          in: query
          schema:
            type: array
            items:
              type: string
        - name: search
          in: query
          schema:
            type: string
        - name: isPublic
          in: query
          schema:
            type: boolean
        - name: isPinned
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Lista de documentos obtenida exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  documents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Knowledge'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags: [knowledge]
      summary: Crear documento
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, content]
              properties:
                title:
                  type: string
                content:
                  type: string
                category:
                  type: string
                  default: general
                tags:
                  type: array
                  items:
                    type: string
                type:
                  type: string
                  enum: [article, faq, video, document]
                  default: article
                isPublic:
                  type: boolean
                  default: true
              example:
                title: "Cómo usar WhatsApp Business"
                content: "Guía completa para usar WhatsApp Business..."
                category: "tutorial"
                tags: ["whatsapp", "tutorial"]
      responses:
        '201':
          description: Documento creado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  document:
                    $ref: '#/components/schemas/Knowledge'

  /knowledge/{id}:
    get:
      tags: [knowledge]
      summary: Obtener documento por ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Documento obtenido exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  document:
                    allOf:
                      - $ref: '#/components/schemas/Knowledge'
                      - type: object
                        properties:
                          relatedArticles:
                            type: array
                            items:
                              $ref: '#/components/schemas/Knowledge'

    put:
      tags: [knowledge]
      summary: Actualizar documento
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                category:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
                type:
                  type: string
                isPublic:
                  type: boolean
      responses:
        '200':
          description: Documento actualizado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  document:
                    $ref: '#/components/schemas/Knowledge'

    delete:
      tags: [knowledge]
      summary: Eliminar documento
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Documento eliminado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /knowledge/search:
    get:
      tags: [knowledge]
      summary: Buscar en base de conocimiento
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
          description: Término de búsqueda
        - name: category
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Resultados de búsqueda obtenidos exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  documents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Knowledge'
                  total:
                    type: integer
                  searchTerm:
                    type: string

  /knowledge/categories:
    get:
      tags: [knowledge]
      summary: Obtener categorías disponibles
      responses:
        '200':
          description: Categorías obtenidas exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  categories:
                    type: array
                    items:
                      type: string
                  total:
                    type: integer

  /knowledge/{id}/publish:
    post:
      tags: [knowledge]
      summary: Publicar documento
      description: Solo administradores pueden publicar documentos
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Documento publicado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  document:
                    $ref: '#/components/schemas/Knowledge'

  /knowledge/{id}/vote-helpful:
    post:
      tags: [knowledge]
      summary: Votar documento como útil
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Voto registrado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  stats:
                    type: object

  /knowledge/upload:
    post:
      tags: [knowledge]
      summary: Subir archivo
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Archivo subido exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  file:
                    type: object

  # =============== DASHBOARD ENDPOINTS ===============
  /dashboard/metrics:
    get:
      tags: [dashboard]
      summary: Obtener métricas generales
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [1d, 7d, 30d, 90d, 1y]
            default: 7d
        - name: startDate
          in: query
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Métricas obtenidas exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  period:
                    type: object
                  summary:
                    type: object
                  messages:
                    type: object
                  contacts:
                    type: object
                  campaigns:
                    type: object
                  userActivity:
                    type: object
                  recentActivity:
                    type: array
                  trends:
                    type: array

  /dashboard/export:
    get:
      tags: [dashboard]
      summary: Exportar reporte completo
      parameters:
        - name: format
          in: query
          schema:
            type: string
            enum: [json, csv]
            default: json
        - name: period
          in: query
          schema:
            type: string
            enum: [7d, 30d, 90d]
            default: 30d
      responses:
        '200':
          description: Reporte exportado exitosamente
          content:
            application/json:
              schema:
                type: object
            text/csv:
              schema:
                type: string

  /dashboard/performance:
    get:
      tags: [dashboard]
      summary: Métricas de rendimiento del equipo
      description: Solo administradores pueden acceder
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [30d, 90d]
            default: 30d
      responses:
        '200':
          description: Métricas de rendimiento obtenidas exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  period:
                    type: object
                  teamMetrics:
                    type: array
                  rankings:
                    type: object
                  summary:
                    type: object

  # =============== TEAM ENDPOINTS ===============
  /team:
    get:
      tags: [team]
      summary: Listar miembros del equipo
      description: Solo administradores pueden acceder
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: role
          in: query
          schema:
            type: string
            enum: [admin, agent, viewer]
        - name: isActive
          in: query
          schema:
            type: boolean
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Lista de miembros obtenida exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/User'
                        - type: object
                          properties:
                            kpis:
                              type: object
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /team/invite:
    post:
      tags: [team]
      summary: Invitar nuevo miembro
      description: Solo administradores pueden invitar miembros
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, displayName]
              properties:
                email:
                  type: string
                  format: email
                displayName:
                  type: string
                role:
                  type: string
                  enum: [admin, agent, viewer]
                  default: viewer
              example:
                email: nuevo@funday.com
                displayName: Nuevo Miembro
                role: agent
      responses:
        '201':
          description: Miembro invitado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
                  temporaryPassword:
                    type: string

  /team/{id}:
    get:
      tags: [team]
      summary: Obtener miembro por ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Miembro obtenido exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    allOf:
                      - $ref: '#/components/schemas/User'
                      - type: object
                        properties:
                          kpis:
                            type: object

    put:
      tags: [team]
      summary: Actualizar miembro
      description: Solo administradores pueden actualizar miembros
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                displayName:
                  type: string
                role:
                  type: string
                  enum: [admin, agent, viewer]
                isActive:
                  type: boolean
      responses:
        '200':
          description: Miembro actualizado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'

    delete:
      tags: [team]
      summary: Eliminar miembro
      description: Solo administradores pueden eliminar miembros
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Miembro eliminado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /team/{id}/kpis:
    get:
      tags: [team]
      summary: Obtener KPIs de un miembro
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: period
          in: query
          schema:
            type: string
            enum: [7d, 30d, 90d]
            default: 30d
      responses:
        '200':
          description: KPIs obtenidos exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                  period:
                    type: string
                  kpis:
                    type: object
                    properties:
                      period:
                        type: object
                      summary:
                        type: object
                      detailed:
                        type: object

  /team/{id}/reset-password:
    post:
      tags: [team]
      summary: Resetear contraseña
      description: Solo administradores pueden resetear contraseñas
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Contraseña reseteada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  temporaryPassword:
                    type: string 

# ==========================================
# CONVERSACIONES Y TIEMPO REAL - NUEVOS ENDPOINTS
# ==========================================

## Socket.IO para Tiempo Real

### Conexión
```javascript
const socket = io('https://utalk-backend.railway.app', {
  auth: {
    token: 'firebase_jwt_token'
  }
});
```

### Eventos principales:
- **join-conversation**: Unirse a conversación específica
- **new-message**: Nuevo mensaje en tiempo real
- **message-read**: Mensaje marcado como leído
- **conversation-status-changed**: Cambio de estado
- **typing-start/stop**: Indicadores de escritura

### Nuevos Endpoints REST:
- GET /api/conversations - Lista de conversaciones
- GET /api/conversations/{id}/messages - Mensajes por conversación  
- PUT /api/conversations/{id}/read - Marcar como leída
- PUT /api/conversations/{id}/assign - Asignar a agente
- PUT /api/conversations/{id}/status - Cambiar estado
- GET /media/{category}/{filename} - Archivos multimedia
- PUT /api/messages/{id}/read - Marcar mensaje como leído
- PUT /api/messages/read-multiple - Marcar múltiples como leídos

### Estructura de Conversación:
```json
{
  "id": "conv_1234567890_0987654321",
  "participants": ["+1234567890", "+0987654321"],
  "lastMessage": "Hola, ¿cómo estás?",
  "lastMessageAt": "2024-01-15T10:30:00Z",
  "messageCount": 25,
  "unreadCount": 3,
  "assignedTo": "agent-user-id",
  "status": "open",
  "priority": "normal",
  "customerPhone": "+1234567890",
  "agentPhone": "+0987654321"
}
```

### Multimedia:
- Descarga automática de archivos de Twilio
- Almacenamiento permanente categorizado (images, videos, audio, documents)
- URLs públicas seguras con autenticación
- Validación de tipos de archivo y tamaños
- Optimización automática de almacenamiento
