#!/usr/bin/env node

/**
 * Script de Migraci√≥n de Datos de Incidentes
 * Migra empleados existentes al nuevo sistema de incidentes
 * 
 * Uso: node scripts/migrate-incident-data.js
 */

const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '../.env') });

const IncidentInitializationService = require('../src/services/IncidentInitializationService');

async function main() {
  try {
    console.log('üöÄ Iniciando migraci√≥n de datos de incidentes...');
    console.log('================================================');
    
    // 1. Migrar empleados existentes
    console.log('\nüìã Paso 1: Migrando empleados existentes...');
    const migrationResult = await IncidentInitializationService.migrateExistingEmployees();
    
    console.log('\nüìä Resultados de migraci√≥n:');
    console.log(`   Total empleados: ${migrationResult.total}`);
    console.log(`   Migrados: ${migrationResult.migrated}`);
    console.log(`   Errores: ${migrationResult.errors}`);
    
    // 2. Recalcular estad√≠sticas
    console.log('\nüìä Paso 2: Recalculando estad√≠sticas...');
    const recalculationResult = await IncidentInitializationService.recalculateAllStatistics();
    
    console.log('\nüìä Resultados de rec√°lculo:');
    console.log(`   Total empleados: ${recalculationResult.total}`);
    console.log(`   Recalculados: ${recalculationResult.recalculated}`);
    console.log(`   Errores: ${recalculationResult.errors}`);
    
    // 3. Generar reporte por departamento
    console.log('\nüìã Paso 3: Generando reporte por departamento...');
    const departmentReport = await IncidentInitializationService.generateDepartmentReport();
    
    console.log('\nüìä Reporte por departamento:');
    Object.entries(departmentReport.departments).forEach(([dept, stats]) => {
      console.log(`   ${dept}:`);
      console.log(`     Empleados: ${stats.totalEmployees}`);
      console.log(`     Incidentes: ${stats.totalIncidents}`);
      console.log(`     Costo total: $${stats.totalCost.toFixed(2)}`);
    });
    
    // 4. Identificar incidentes cr√≠ticos
    console.log('\nüö® Paso 4: Identificando incidentes cr√≠ticos...');
    const criticalIncidents = await IncidentInitializationService.identifyCriticalIncidents();
    
    console.log('\nüìä Incidentes cr√≠ticos:');
    console.log(`   Total empleados con incidentes cr√≠ticos: ${criticalIncidents.count}`);
    if (criticalIncidents.count > 0) {
      criticalIncidents.criticalIncidents.forEach(incident => {
        console.log(`   - ${incident.employeeName} (${incident.department}): ${incident.criticalIncidents} cr√≠ticos`);
      });
    }
    
    // 5. Limpiar datos obsoletos
    console.log('\nüßπ Paso 5: Limpiando datos obsoletos...');
    const cleanupResult = await IncidentInitializationService.cleanupObsoleteData();
    
    console.log('\nüìä Resultados de limpieza:');
    console.log(`   Total empleados inactivos: ${cleanupResult.total}`);
    console.log(`   Marcados para limpieza: ${cleanupResult.cleaned}`);
    console.log(`   Errores: ${cleanupResult.errors}`);
    
    console.log('\nüéâ ¬°Migraci√≥n completada exitosamente!');
    console.log('================================================');
    
    // Resumen final
    const totalErrors = migrationResult.errors + recalculationResult.errors + cleanupResult.errors;
    const totalProcessed = migrationResult.migrated + recalculationResult.recalculated;
    
    console.log('\nüìà RESUMEN FINAL:');
    console.log(`   ‚úÖ Empleados procesados: ${totalProcessed}`);
    console.log(`   ‚ùå Errores totales: ${totalErrors}`);
    console.log(`   üéØ Tasa de √©xito: ${((totalProcessed / (totalProcessed + totalErrors)) * 100).toFixed(2)}%`);
    console.log(`   üö® Incidentes cr√≠ticos encontrados: ${criticalIncidents.count}`);
    console.log(`   üìä Departamentos procesados: ${Object.keys(departmentReport.departments).length}`);
    
    if (totalErrors > 0) {
      console.log('\n‚ö†Ô∏è  Se encontraron errores durante la migraci√≥n.');
      console.log('   Revisa los logs para m√°s detalles.');
    } else {
      console.log('\n‚ú® ¬°Migraci√≥n perfecta! Todos los empleados fueron procesados sin errores.');
    }
    
    if (criticalIncidents.count > 0) {
      console.log('\nüö® ATENCI√ìN: Se encontraron empleados con incidentes cr√≠ticos pendientes.');
      console.log('   Se recomienda revisar estos casos inmediatamente.');
    }
    
    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå Error durante la migraci√≥n:', error);
    console.error('================================================');
    console.error('Detalles del error:', error.message);
    console.error('Stack trace:', error.stack);
    process.exit(1);
  }
}

// Ejecutar solo si es llamado directamente
if (require.main === module) {
  main();
}

module.exports = { main };
