#!/usr/bin/env node

/**
 * Script de limpieza de Firestore
 * Ejecutar con: node scripts/cleanup-firestore.js [opciones]
 */

require('dotenv').config();
const { firestore, FieldValue, Timestamp } = require('../src/config/firebase');
const logger = require('../src/utils/logger');

// Configuraci√≥n por argumentos de l√≠nea de comandos
const args = process.argv.slice(2);
const options = {
  dryRun: args.includes('--dry-run'),
  orphansOnly: args.includes('--orphans-only'),
  oldDataOnly: args.includes('--old-data-only'),
  optimize: args.includes('--optimize'),
  verbose: args.includes('--verbose'),
  force: args.includes('--force'),
};

/**
 * Clase principal para limpieza de Firestore
 */
class FirestoreCleanup {
  constructor () {
    this.stats = {
      documentsScanned: 0,
      documentsDeleted: 0,
      collectionsProcessed: 0,
      orphansFound: 0,
      dataCorrupted: 0,
      errorsEncountered: 0,
    };
  }

  /**
   * Ejecutar limpieza principal
   */
  async run () {
    try {
      console.log('üßπ INICIANDO LIMPIEZA DE FIRESTORE');
      console.log('=====================================');

      if (options.dryRun) {
        console.log('üîç MODO DRY RUN - No se eliminar√°n datos realmente');
      }

      // 1. Limpiar documentos hu√©rfanos
      if (!options.oldDataOnly) {
        console.log('\nüìÇ Limpiando documentos hu√©rfanos...');
        await this.cleanOrphanedDocuments();
      }

      // 2. Limpiar datos antiguos
      if (!options.orphansOnly) {
        console.log('\nüóìÔ∏è Limpiando datos antiguos...');
        await this.cleanOldData();
      }

      // 3. Limpiar datos corruptos
      console.log('\nüîß Validando y limpiando datos corruptos...');
      await this.cleanCorruptedData();

      // 4. Optimizaci√≥n opcional
      if (options.optimize) {
        console.log('\n‚ö° Optimizando estructura de datos...');
        await this.optimizeCollections();
      }

      // 5. Mostrar estad√≠sticas finales
      console.log('\nüìä ESTAD√çSTICAS DE LIMPIEZA');
      console.log('=============================');
      console.log(`üìÑ Documentos escaneados: ${this.stats.documentsScanned}`);
      console.log(`üóëÔ∏è Documentos eliminados: ${this.stats.documentsDeleted}`);
      console.log(`üìÅ Colecciones procesadas: ${this.stats.collectionsProcessed}`);
      console.log(`üîó Hu√©rfanos encontrados: ${this.stats.orphansFound}`);
      console.log(`üíî Datos corruptos: ${this.stats.dataCorrupted}`);
      console.log(`‚ùå Errores encontrados: ${this.stats.errorsEncountered}`);

      console.log('\n‚úÖ LIMPIEZA COMPLETADA');

      if (options.dryRun) {
        console.log('\nüîç Ejecutar sin --dry-run para aplicar cambios reales');
      }
    } catch (error) {
      console.error('‚ùå Error fatal en limpieza de Firestore:', error);
      process.exit(1);
    }
  }

  /**
   * Limpiar documentos hu√©rfanos
   */
  async cleanOrphanedDocuments () {
    try {
      // Buscar mensajes hu√©rfanos (sin conversationId v√°lido)
      await this.cleanOrphanedMessages();

      // Buscar conversaciones hu√©rfanas (sin mensajes)
      await this.cleanOrphanedConversations();

      // Buscar contactos hu√©rfanos (sin mensajes ni conversaciones)
      await this.cleanOrphanedContacts();
    } catch (error) {
      console.error('‚ùå Error limpiando documentos hu√©rfanos:', error);
      this.stats.errorsEncountered++;
    }
  }

  /**
   * Limpiar mensajes hu√©rfanos
   */
  async cleanOrphanedMessages () {
    try {
      console.log('   üîç Escaneando mensajes hu√©rfanos...');

      // Obtener todos los mensajes sin conversationId o con conversationId inv√°lido
      const messagesSnapshot = await firestore.collection('messages').get();
      let orphanedCount = 0;

      for (const doc of messagesSnapshot.docs) {
        this.stats.documentsScanned++;
        const data = doc.data();

        // Verificar si es hu√©rfano
        if (!data.conversationId || !this.isValidConversationId(data.conversationId)) {
          this.stats.orphansFound++;
          orphanedCount++;

          if (options.verbose) {
            console.log(`     - Mensaje hu√©rfano: ${doc.id} (conversationId: ${data.conversationId || 'null'})`);
          }

          // Eliminar si no es dry run
          if (!options.dryRun) {
            await doc.ref.delete();
            this.stats.documentsDeleted++;
          }
        }
      }

      console.log(`   ‚úÖ Mensajes hu√©rfanos: ${orphanedCount} encontrados`);
    } catch (error) {
      console.error('   ‚ùå Error limpiando mensajes hu√©rfanos:', error);
      this.stats.errorsEncountered++;
    }
  }

  /**
   * Limpiar conversaciones hu√©rfanas
   */
  async cleanOrphanedConversations () {
    try {
      console.log('   üîç Escaneando conversaciones hu√©rfanas...');

      const conversationsSnapshot = await firestore.collection('conversations').get();
      let orphanedCount = 0;

      for (const doc of conversationsSnapshot.docs) {
        this.stats.documentsScanned++;
        const data = doc.data();

        // Verificar si tiene mensajes asociados
        const messagesSnapshot = await firestore
          .collection('messages')
          .where('conversationId', '==', doc.id)
          .limit(1)
          .get();

        if (messagesSnapshot.empty) {
          this.stats.orphansFound++;
          orphanedCount++;

          if (options.verbose) {
            console.log(`     - Conversaci√≥n hu√©rfana: ${doc.id}`);
          }

          // Eliminar si no es dry run
          if (!options.dryRun) {
            await doc.ref.delete();
            this.stats.documentsDeleted++;
          }
        }
      }

      console.log(`   ‚úÖ Conversaciones hu√©rfanas: ${orphanedCount} encontradas`);
    } catch (error) {
      console.error('   ‚ùå Error limpiando conversaciones hu√©rfanas:', error);
      this.stats.errorsEncountered++;
    }
  }

  /**
   * Limpiar contactos hu√©rfanos
   */
  async cleanOrphanedContacts () {
    try {
      console.log('   üîç Escaneando contactos hu√©rfanos...');

      const contactsSnapshot = await firestore.collection('contacts').get();
      let orphanedCount = 0;

      for (const doc of contactsSnapshot.docs) {
        this.stats.documentsScanned++;
        const data = doc.data();

        // Verificar si tiene mensajes o conversaciones asociadas
        const [messagesSnapshot, conversationsSnapshot] = await Promise.all([
          firestore.collection('messages')
            .where('from', '==', data.phone)
            .limit(1)
            .get(),
          firestore.collection('messages')
            .where('to', '==', data.phone)
            .limit(1)
            .get(),
        ]);

        if (messagesSnapshot.empty && conversationsSnapshot.empty) {
          // Verificar que el contacto no sea reciente (menor a 7 d√≠as)
          const createdAt = data.createdAt?.toDate() || new Date(0);
          const daysSinceCreated = (Date.now() - createdAt.getTime()) / (1000 * 60 * 60 * 24);

          if (daysSinceCreated > 7) {
            this.stats.orphansFound++;
            orphanedCount++;

            if (options.verbose) {
              console.log(`     - Contacto hu√©rfano: ${doc.id} (${data.phone})`);
            }

            // Eliminar si no es dry run
            if (!options.dryRun) {
              await doc.ref.delete();
              this.stats.documentsDeleted++;
            }
          }
        }
      }

      console.log(`   ‚úÖ Contactos hu√©rfanos: ${orphanedCount} encontrados`);
    } catch (error) {
      console.error('   ‚ùå Error limpiando contactos hu√©rfanos:', error);
      this.stats.errorsEncountered++;
    }
  }

  /**
   * Limpiar datos antiguos
   */
  async cleanOldData () {
    try {
      // Limpiar logs antiguos (m√°s de 30 d√≠as)
      await this.cleanOldLogs();

      // Limpiar m√©tricas antiguas (m√°s de 90 d√≠as)
      await this.cleanOldMetrics();

      // Limpiar datos de debug antiguos
      await this.cleanOldDebugData();
    } catch (error) {
      console.error('‚ùå Error limpiando datos antiguos:', error);
      this.stats.errorsEncountered++;
    }
  }

  /**
   * Limpiar logs antiguos
   */
  async cleanOldLogs () {
    try {
      console.log('   üîç Limpiando logs antiguos...');

      const cutoffDate = new Date(Date.now() - (30 * 24 * 60 * 60 * 1000)); // 30 d√≠as
      let deletedCount = 0;

      // Buscar logs antiguos
      const logsSnapshot = await firestore
        .collection('logs')
        .where('timestamp', '<', Timestamp.fromDate(cutoffDate))
        .get();

      if (!logsSnapshot.empty) {
        // Eliminar en lotes para mejor rendimiento
        const batches = this.createBatches(logsSnapshot.docs, 500);

        for (const batch of batches) {
          if (!options.dryRun) {
            const deleteBatch = firestore.batch();
            batch.forEach(doc => {
              deleteBatch.delete(doc.ref);
            });
            await deleteBatch.commit();
          }

          deletedCount += batch.length;
          this.stats.documentsDeleted += batch.length;
          this.stats.documentsScanned += batch.length;
        }
      }

      console.log(`   ‚úÖ Logs antiguos eliminados: ${deletedCount}`);
    } catch (error) {
      console.error('   ‚ùå Error limpiando logs antiguos:', error);
      this.stats.errorsEncountered++;
    }
  }

  /**
   * Limpiar m√©tricas antiguas
   */
  async cleanOldMetrics () {
    try {
      console.log('   üîç Limpiando m√©tricas antiguas...');

      const cutoffDate = new Date(Date.now() - (90 * 24 * 60 * 60 * 1000)); // 90 d√≠as
      let deletedCount = 0;

      // Buscar m√©tricas antiguas
      const metricsSnapshot = await firestore
        .collection('dashboard_metrics')
        .where('createdAt', '<', Timestamp.fromDate(cutoffDate))
        .get();

      if (!metricsSnapshot.empty) {
        const batches = this.createBatches(metricsSnapshot.docs, 500);

        for (const batch of batches) {
          if (!options.dryRun) {
            const deleteBatch = firestore.batch();
            batch.forEach(doc => {
              deleteBatch.delete(doc.ref);
            });
            await deleteBatch.commit();
          }

          deletedCount += batch.length;
          this.stats.documentsDeleted += batch.length;
          this.stats.documentsScanned += batch.length;
        }
      }

      console.log(`   ‚úÖ M√©tricas antiguas eliminadas: ${deletedCount}`);
    } catch (error) {
      console.error('   ‚ùå Error limpiando m√©tricas antiguas:', error);
      this.stats.errorsEncountered++;
    }
  }

  /**
   * Limpiar datos de debug antiguos
   */
  async cleanOldDebugData () {
    try {
      console.log('   üîç Limpiando datos de debug...');

      const debugCollections = ['_debug', '_test', '_health'];
      let totalDeleted = 0;

      for (const collectionName of debugCollections) {
        try {
          const snapshot = await firestore.collection(collectionName).get();

          if (!snapshot.empty) {
            let deleted = 0;

            for (const doc of snapshot.docs) {
              this.stats.documentsScanned++;

              if (!options.dryRun) {
                await doc.ref.delete();
              }

              deleted++;
              this.stats.documentsDeleted++;
            }

            totalDeleted += deleted;

            if (options.verbose) {
              console.log(`     - ${collectionName}: ${deleted} documentos`);
            }
          }
        } catch (error) {
          // Ignorar errores de colecciones que no existen
          if (!error.message.includes('not found')) {
            console.warn(`     ‚ö†Ô∏è Error limpiando ${collectionName}:`, error.message);
          }
        }
      }

      console.log(`   ‚úÖ Datos de debug eliminados: ${totalDeleted}`);
    } catch (error) {
      console.error('   ‚ùå Error limpiando datos de debug:', error);
      this.stats.errorsEncountered++;
    }
  }

  /**
   * Limpiar datos corruptos
   */
  async cleanCorruptedData () {
    try {
      // Validar mensajes con campos faltantes
      await this.validateMessages();

      // Validar conversaciones con datos inconsistentes
      await this.validateConversations();

      // Validar contactos con datos inv√°lidos
      await this.validateContacts();
    } catch (error) {
      console.error('‚ùå Error validando datos:', error);
      this.stats.errorsEncountered++;
    }
  }

  /**
   * Validar mensajes
   */
  async validateMessages () {
    try {
      console.log('   üîç Validando mensajes...');

      const messagesSnapshot = await firestore.collection('messages').get();
      let corruptedCount = 0;

      for (const doc of messagesSnapshot.docs) {
        this.stats.documentsScanned++;
        const data = doc.data();

        // Verificar campos obligatorios
        const requiredFields = ['from', 'to', 'direction', 'timestamp'];
        const missingFields = requiredFields.filter(field => !data[field]);

        if (missingFields.length > 0) {
          this.stats.dataCorrupted++;
          corruptedCount++;

          if (options.verbose) {
            console.log(`     - Mensaje corrupto: ${doc.id} (faltan: ${missingFields.join(', ')})`);
          }

          // Intentar reparar o eliminar
          if (!options.dryRun) {
            if (this.canRepairMessage(data)) {
              await this.repairMessage(doc.ref, data);
            } else {
              await doc.ref.delete();
              this.stats.documentsDeleted++;
            }
          }
        }
      }

      console.log(`   ‚úÖ Mensajes corruptos: ${corruptedCount} encontrados`);
    } catch (error) {
      console.error('   ‚ùå Error validando mensajes:', error);
      this.stats.errorsEncountered++;
    }
  }

  /**
   * Validar conversaciones
   */
  async validateConversations () {
    try {
      console.log('   üîç Validando conversaciones...');

      const conversationsSnapshot = await firestore.collection('conversations').get();
      let corruptedCount = 0;

      for (const doc of conversationsSnapshot.docs) {
        this.stats.documentsScanned++;
        const data = doc.data();

        // Verificar campos obligatorios
        if (!data.contactId || !data.createdAt) {
          this.stats.dataCorrupted++;
          corruptedCount++;

          if (options.verbose) {
            console.log(`     - Conversaci√≥n corrupta: ${doc.id}`);
          }

          // Intentar reparar o eliminar
          if (!options.dryRun) {
            if (this.canRepairConversation(data)) {
              await this.repairConversation(doc.ref, data);
            } else {
              await doc.ref.delete();
              this.stats.documentsDeleted++;
            }
          }
        }
      }

      console.log(`   ‚úÖ Conversaciones corruptas: ${corruptedCount} encontradas`);
    } catch (error) {
      console.error('   ‚ùå Error validando conversaciones:', error);
      this.stats.errorsEncountered++;
    }
  }

  /**
   * Validar contactos
   */
  async validateContacts () {
    try {
      console.log('   üîç Validando contactos...');

      const contactsSnapshot = await firestore.collection('contacts').get();
      let corruptedCount = 0;

      for (const doc of contactsSnapshot.docs) {
        this.stats.documentsScanned++;
        const data = doc.data();

        // Verificar formato de tel√©fono
        if (!data.phone || !this.isValidPhoneNumber(data.phone)) {
          this.stats.dataCorrupted++;
          corruptedCount++;

          if (options.verbose) {
            console.log(`     - Contacto corrupto: ${doc.id} (tel√©fono: ${data.phone})`);
          }

          // Intentar reparar o eliminar
          if (!options.dryRun) {
            if (this.canRepairContact(data)) {
              await this.repairContact(doc.ref, data);
            } else {
              await doc.ref.delete();
              this.stats.documentsDeleted++;
            }
          }
        }
      }

      console.log(`   ‚úÖ Contactos corruptos: ${corruptedCount} encontrados`);
    } catch (error) {
      console.error('   ‚ùå Error validando contactos:', error);
      this.stats.errorsEncountered++;
    }
  }

  /**
   * Optimizar colecciones
   */
  async optimizeCollections () {
    try {
      // Recalcular contadores de mensajes
      await this.recalculateMessageCounts();

      // Optimizar √≠ndices (conceptual)
      await this.suggestIndexOptimizations();
    } catch (error) {
      console.error('‚ùå Error optimizando colecciones:', error);
      this.stats.errorsEncountered++;
    }
  }

  /**
   * Recalcular contadores de mensajes
   */
  async recalculateMessageCounts () {
    try {
      console.log('   üî¢ Recalculando contadores de mensajes...');

      const conversationsSnapshot = await firestore.collection('conversations').get();
      let updatedCount = 0;

      for (const doc of conversationsSnapshot.docs) {
        this.stats.documentsScanned++;

        // Contar mensajes reales
        const messagesSnapshot = await firestore
          .collection('messages')
          .where('conversationId', '==', doc.id)
          .get();

        const actualCount = messagesSnapshot.size;
        const storedCount = doc.data().messageCount || 0;

        if (actualCount !== storedCount) {
          if (options.verbose) {
            console.log(`     - Conversaci√≥n ${doc.id}: ${storedCount} ‚Üí ${actualCount} mensajes`);
          }

          if (!options.dryRun) {
            await doc.ref.update({ messageCount: actualCount });
          }

          updatedCount++;
        }
      }

      console.log(`   ‚úÖ Contadores actualizados: ${updatedCount}`);
    } catch (error) {
      console.error('   ‚ùå Error recalculando contadores:', error);
      this.stats.errorsEncountered++;
    }
  }

  /**
   * Sugerir optimizaciones de √≠ndices
   */
  async suggestIndexOptimizations () {
    console.log('   üí° Sugerencias de optimizaci√≥n:');
    console.log('     - Crear √≠ndice compuesto en messages: (conversationId, timestamp)');
    console.log('     - Crear √≠ndice compuesto en contacts: (phone, isActive)');
    console.log('     - Crear √≠ndice en conversations: (status, updatedAt)');
    console.log('     - Considerar √≠ndice TTL para logs y m√©tricas');
  }

  // M√©todos de utilidad

  /**
   * Verificar si es un conversationId v√°lido
   */
  isValidConversationId (id) {
    return typeof id === 'string' && /^conv_\d+_\d+$/.test(id);
  }

  /**
   * Verificar si es un n√∫mero de tel√©fono v√°lido
   */
  isValidPhoneNumber (phone) {
    return typeof phone === 'string' && /^\+[1-9]\d{1,14}$/.test(phone);
  }

  /**
   * Crear lotes para operaciones masivas
   */
  createBatches (docs, batchSize) {
    const batches = [];
    for (let i = 0; i < docs.length; i += batchSize) {
      batches.push(docs.slice(i, i + batchSize));
    }
    return batches;
  }

  /**
   * Verificar si un mensaje puede ser reparado
   */
  canRepairMessage (data) {
    // Solo reparar si tiene datos b√°sicos
    return data.from && data.to && (data.content || data.type);
  }

  /**
   * Reparar mensaje
   */
  async repairMessage (docRef, data) {
    const updates = {};

    if (!data.direction) {
      updates.direction = 'unknown';
    }

    if (!data.timestamp) {
      updates.timestamp = Timestamp.now();
    }

    if (!data.status) {
      updates.status = 'delivered';
    }

    if (Object.keys(updates).length > 0) {
      await docRef.update(updates);
    }
  }

  /**
   * Verificar si una conversaci√≥n puede ser reparada
   */
  canRepairConversation (data) {
    return data.id || (data.from && data.to);
  }

  /**
   * Reparar conversaci√≥n
   */
  async repairConversation (docRef, data) {
    const updates = {};

    if (!data.createdAt) {
      updates.createdAt = Timestamp.now();
    }

    if (!data.status) {
      updates.status = 'open';
    }

    if (!data.messageCount) {
      updates.messageCount = 0;
    }

    if (Object.keys(updates).length > 0) {
      await docRef.update(updates);
    }
  }

  /**
   * Verificar si un contacto puede ser reparado
   */
  canRepairContact (data) {
    return data.phone && typeof data.phone === 'string';
  }

  /**
   * Reparar contacto
   */
  async repairContact (docRef, data) {
    const updates = {};

    // Intentar normalizar el tel√©fono
    if (data.phone && !this.isValidPhoneNumber(data.phone)) {
      const normalized = this.normalizePhoneNumber(data.phone);
      if (normalized) {
        updates.phone = normalized;
      }
    }

    if (!data.name) {
      updates.name = data.phone;
    }

    if (!data.createdAt) {
      updates.createdAt = Timestamp.now();
    }

    if (Object.keys(updates).length > 0) {
      await docRef.update(updates);
    }
  }

  /**
   * Normalizar n√∫mero de tel√©fono
   */
  normalizePhoneNumber (phone) {
    if (!phone) return null;

    // Remover espacios y caracteres especiales
    let cleaned = phone.replace(/[^\d+]/g, '');

    // Agregar + si no lo tiene
    if (!cleaned.startsWith('+')) {
      cleaned = '+' + cleaned;
    }

    // Verificar si ahora es v√°lido
    if (this.isValidPhoneNumber(cleaned)) {
      return cleaned;
    }

    return null;
  }
}

// Mostrar ayuda si se solicita
if (args.includes('--help') || args.includes('-h')) {
  console.log(`
üßπ Script de Limpieza de Firestore
===================================

Uso: node scripts/cleanup-firestore.js [opciones]

Opciones:
  --dry-run           Simular limpieza sin eliminar datos
  --orphans-only      Solo limpiar documentos hu√©rfanos
  --old-data-only     Solo limpiar datos antiguos
  --optimize          Optimizar estructura de datos
  --verbose           Mostrar informaci√≥n detallada
  --force             Forzar limpieza sin confirmaci√≥n
  --help, -h          Mostrar esta ayuda

Ejemplos:
  node scripts/cleanup-firestore.js --dry-run --verbose
  node scripts/cleanup-firestore.js --orphans-only
  node scripts/cleanup-firestore.js --old-data-only --force
  node scripts/cleanup-firestore.js --optimize
`);
  process.exit(0);
}

// Confirmaci√≥n de seguridad
if (!options.dryRun && !options.force) {
  console.log('‚ö†Ô∏è  ADVERTENCIA: Esta operaci√≥n modificar√° la base de datos de producci√≥n');
  console.log('   Usa --dry-run para simular primero o --force para continuar');
  process.exit(1);
}

// Ejecutar limpieza principal
const cleanup = new FirestoreCleanup();
cleanup.run().catch(error => {
  console.error('‚ùå Error no manejado:', error);
  process.exit(1);
});
