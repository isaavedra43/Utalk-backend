/**
 * üîß SCRIPT DE PRUEBA PARA VERIFICAR LA SOLUCI√ìN DE WEBSOCKET
 * 
 * Este script verifica que:
 * 1. El workspaceId se extrae correctamente del JWT en WebSocket
 * 2. Los listeners de eventos est√°n configurados
 * 3. La funci√≥n broadcastToConversation funciona correctamente
 * 
 * @version 1.0.0
 */

const jwt = require('jsonwebtoken');
const { Server } = require('socket.io');
const { createServer } = require('http');

// Configuraci√≥n de prueba
const TEST_CONFIG = {
  JWT_SECRET: process.env.JWT_SECRET || 'test-secret',
  PORT: 3001,
  TEST_USER: {
    email: 'test@company.com',
    role: 'admin',
    workspaceId: 'default',
    tenantId: 'na',
    userId: 'test@company.com'
  }
};

/**
 * Generar JWT de prueba con workspaceId
 */
function generateTestJWT() {
  const payload = {
    email: TEST_CONFIG.TEST_USER.email,
    role: TEST_CONFIG.TEST_USER.role,
    name: 'Test User',
    type: 'access',
    userId: TEST_CONFIG.TEST_USER.userId,
    workspaceId: TEST_CONFIG.TEST_USER.workspaceId,
    tenantId: TEST_CONFIG.TEST_USER.tenantId,
    iat: Math.floor(Date.now() / 1000),
    exp: Math.floor(Date.now() / 1000) + 3600, // 1 hora
    aud: 'utalk-api',
    iss: 'utalk-backend'
  };

  return jwt.sign(payload, TEST_CONFIG.JWT_SECRET);
}

/**
 * Verificar que el JWT contiene workspaceId
 */
function verifyJWTWorkspaceId(token) {
  try {
    const decoded = jwt.verify(token, TEST_CONFIG.JWT_SECRET);
    logger.info('Console log migrated', { category: 'AUTO_MIGRATED', content: '‚úÖ JWT verificado correctamente' });
    logger.info('Console log migrated', { category: 'AUTO_MIGRATED', content: 'üìã Claims del JWT:', {
      email: decoded.email,
      role: decoded.role,
      workspaceId: decoded.workspaceId,
      tenantId: decoded.tenantId,
      userId: decoded.userId
    } });
    
    return {
      hasWorkspaceId: !!decoded.workspaceId,
      workspaceId: decoded.workspaceId,
      hasTenantId: !!decoded.tenantId,
      tenantId: decoded.tenantId
    };
  } catch (error) {
    console.error('‚ùå Error verificando JWT:', error.message);
    return null;
  }
}

/**
 * Simular middleware de autenticaci√≥n WebSocket
 */
function simulateSocketAuthMiddleware(socket, token) {
  try {
    const decoded = jwt.verify(token, TEST_CONFIG.JWT_SECRET);
    
    // Extraer workspaceId y tenantId del JWT (como en la soluci√≥n)
    const workspaceId = decoded.workspaceId || 'default';
    const tenantId = decoded.tenantId || 'na';
    const userId = decoded.userId || decoded.email;

    // Adjuntar al socket (como en la soluci√≥n)
    socket.userEmail = decoded.email;
    socket.userRole = decoded.role;
    socket.decodedToken = decoded;
    socket.workspaceId = workspaceId;  // üîß CORRECCI√ìN: Agregar directamente
    socket.tenantId = tenantId;        // üîß CORRECCI√ìN: Agregar directamente

    logger.info('Console log migrated', { category: 'AUTO_MIGRATED', content: '‚úÖ Middleware de autenticaci√≥n WebSocket simulado' });
    logger.info('Console log migrated', { category: 'AUTO_MIGRATED', content: 'üìã Datos del socket:', {
      userEmail: socket.userEmail,
      userRole: socket.userRole,
      workspaceId: socket.workspaceId,
      tenantId: socket.tenantId,
      hasWorkspaceId: !!socket.workspaceId
    } });

    return true;
  } catch (error) {
    console.error('‚ùå Error en middleware de autenticaci√≥n:', error.message);
    return false;
  }
}

/**
 * Simular funci√≥n broadcastToConversation
 */
function simulateBroadcastToConversation({ workspaceId, tenantId, conversationId, event, payload, socket = null }) {
  logger.info('Console log migrated', { category: 'AUTO_MIGRATED', content: 'üì° Simulando broadcastToConversation...' });
  
  // üîß CORRECCI√ìN: Obtener workspaceId del socket si no se proporciona
  let finalWorkspaceId = workspaceId;
  let finalTenantId = tenantId;

  if (!finalWorkspaceId && socket) {
    finalWorkspaceId = socket.workspaceId || socket.decodedToken?.workspaceId || 'default';
    finalTenantId = socket.tenantId || socket.decodedToken?.tenantId || 'na';
    
    logger.info('Console log migrated', { category: 'AUTO_MIGRATED', content: 'üîß Obteniendo workspaceId del socket:', {
      workspaceIdFromSocket: finalWorkspaceId,
      tenantIdFromSocket: finalTenantId
    } });
  }

  if (!finalWorkspaceId) {
    logger.info('Console log migrated', { category: 'AUTO_MIGRATED', content: '‚ùå Sin workspaceId, omitiendo broadcast' });
    return false;
  }

  const roomId = `ws:${finalWorkspaceId}:ten:${finalTenantId}:conv:${conversationId}`;
  logger.info('Console log migrated', { category: 'AUTO_MIGRATED', content: '‚úÖ Broadcast exitoso:', {
    roomId: roomId,
    event: event,
    workspaceId: finalWorkspaceId,
    tenantId: finalTenantId
  } });

  return true;
}

/**
 * Ejecutar pruebas
 */
async function runTests() {
  logger.info('Console log migrated', { category: 'AUTO_MIGRATED', content: 'üöÄ Iniciando pruebas de WebSocket...\n' });

  // Test 1: Generar JWT con workspaceId
  logger.info('Console log migrated', { category: 'AUTO_MIGRATED', content: 'üìã Test 1: Generar JWT con workspaceId' });
  const testToken = generateTestJWT();
  console.log('‚úÖ JWT generado:', testToken.substring(0, 50) + '...\n');

  // Test 2: Verificar JWT
  logger.info('Console log migrated', { category: 'AUTO_MIGRATED', content: 'üìã Test 2: Verificar JWT' });
  const jwtVerification = verifyJWTWorkspaceId(testToken);
  if (!jwtVerification || !jwtVerification.hasWorkspaceId) {
    console.error('‚ùå Test 2 fall√≥: JWT no contiene workspaceId');
    return;
  }
  logger.info('Console log migrated', { category: 'AUTO_MIGRATED', content: '‚úÖ Test 2 pasado\n' });

  // Test 3: Simular socket y autenticaci√≥n
  logger.info('Console log migrated', { category: 'AUTO_MIGRATED', content: 'üìã Test 3: Simular autenticaci√≥n WebSocket' });
  const mockSocket = {};
  const authResult = simulateSocketAuthMiddleware(mockSocket, testToken);
  if (!authResult) {
    console.error('‚ùå Test 3 fall√≥: Error en autenticaci√≥n');
    return;
  }
  logger.info('Console log migrated', { category: 'AUTO_MIGRATED', content: '‚úÖ Test 3 pasado\n' });

  // Test 4: Simular broadcast sin workspaceId (debe obtenerlo del socket)
  console.log('üìã Test 4: Simular broadcast sin workspaceId (debe obtenerlo del socket)');
  const broadcastResult = simulateBroadcastToConversation({
    conversationId: 'test-conversation',
    event: 'new-message',
    payload: { message: 'test' },
    socket: mockSocket  // üîß CORRECCI√ìN: Pasar el socket
  });
  
  if (!broadcastResult) {
    console.error('‚ùå Test 4 fall√≥: Broadcast fall√≥');
    return;
  }
  logger.info('Console log migrated', { category: 'AUTO_MIGRATED', content: '‚úÖ Test 4 pasado\n' });

  // Test 5: Simular broadcast con workspaceId expl√≠cito
  logger.info('Console log migrated', { category: 'AUTO_MIGRATED', content: 'üìã Test 5: Simular broadcast con workspaceId expl√≠cito' });
  const broadcastResult2 = simulateBroadcastToConversation({
    workspaceId: 'test-workspace',
    tenantId: 'test-tenant',
    conversationId: 'test-conversation',
    event: 'new-message',
    payload: { message: 'test' }
  });
  
  if (!broadcastResult2) {
    console.error('‚ùå Test 5 fall√≥: Broadcast con workspaceId expl√≠cito fall√≥');
    return;
  }
  logger.info('Console log migrated', { category: 'AUTO_MIGRATED', content: '‚úÖ Test 5 pasado\n' });

  logger.info('Console log migrated', { category: 'AUTO_MIGRATED', content: 'üéâ ¬°Todas las pruebas pasaron! La soluci√≥n est√° funcionando correctamente.' });
  logger.info('Console log migrated', { category: 'AUTO_MIGRATED', content: '\nüìã Resumen de la soluci√≥n implementada:' });
  logger.info('Console log migrated', { category: 'AUTO_MIGRATED', content: '1. ‚úÖ JWT incluye workspaceId y tenantId' });
  logger.info('Console log migrated', { category: 'AUTO_MIGRATED', content: '2. ‚úÖ Middleware WebSocket extrae workspaceId del JWT' });
  logger.info('Console log migrated', { category: 'AUTO_MIGRATED', content: '3. ‚úÖ workspaceId se almacena directamente en el socket' });
  logger.info('Console log migrated', { category: 'AUTO_MIGRATED', content: '4. ‚úÖ broadcastToConversation obtiene workspaceId del socket si no se proporciona' });
  logger.info('Console log migrated', { category: 'AUTO_MIGRATED', content: '5. ‚úÖ Los listeners de eventos est√°n configurados correctamente' });
}

// Ejecutar pruebas si se llama directamente
if (require.main === module) {
  runTests().catch(console.error);
}

module.exports = {
  generateTestJWT,
  verifyJWTWorkspaceId,
  simulateSocketAuthMiddleware,
  simulateBroadcastToConversation,
  runTests
}; 