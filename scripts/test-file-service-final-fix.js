/**
 * üß™ SCRIPT DE PRUEBA: Verificaci√≥n de correcciones finales en FileService
 * 
 * Este script verifica que los m√©todos isDocument y el import de monitoring funcionan correctamente
 */

const FileService = require('../src/services/FileService');

async function testFileServiceFinalFixes() {
  console.log('üß™ Iniciando pruebas finales de FileService...\n');

  const fileService = new FileService();

  // Test 1: Verificar que isDocument funciona correctamente
  console.log('üìã Test 1: M√©todo isDocument');
  try {
    const pdfResult = fileService.isDocument('application/pdf');
    console.log('‚úÖ isDocument("application/pdf") ‚Üí', pdfResult);
    
    const wordResult = fileService.isDocument('application/vnd.openxmlformats-officedocument.wordprocessingml.document');
    console.log('‚úÖ isDocument("application/vnd.openxmlformats-officedocument.wordprocessingml.document") ‚Üí', wordResult);
    
    const excelResult = fileService.isDocument('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    console.log('‚úÖ isDocument("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") ‚Üí', excelResult);
    
    const textResult = fileService.isDocument('text/plain');
    console.log('‚úÖ isDocument("text/plain") ‚Üí', textResult);
    
    const imageResult = fileService.isDocument('image/jpeg');
    console.log('‚úÖ isDocument("image/jpeg") ‚Üí', imageResult);
    
    const undefinedResult = fileService.isDocument(undefined);
    console.log('‚úÖ isDocument(undefined) ‚Üí', undefinedResult);
    
  } catch (error) {
    console.log('‚ùå Error en isDocument:', error.message);
  }

  // Test 2: Verificar que todos los m√©todos de validaci√≥n funcionan
  console.log('\nüìã Test 2: Todos los m√©todos de validaci√≥n');
  try {
    const testMimeTypes = [
      'image/jpeg',
      'video/mp4', 
      'audio/mp3',
      'application/pdf',
      'text/plain',
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
    ];

    testMimeTypes.forEach(mimeType => {
      const isImage = fileService.isImage(mimeType);
      const isVideo = fileService.isVideo(mimeType);
      const isAudio = fileService.isAudio(mimeType);
      const isDocument = fileService.isDocument(mimeType);
      
      console.log(`‚úÖ ${mimeType}:`, {
        isImage,
        isVideo, 
        isAudio,
        isDocument
      });
    });
    
  } catch (error) {
    console.log('‚ùå Error en validaciones:', error.message);
  }

  // Test 3: Verificar que el import de monitoring no falla
  console.log('\nüìã Test 3: Import de monitoring');
  try {
    const monitoring = require('../src/utils/monitoring');
    console.log('‚úÖ Import de monitoring exitoso:', typeof monitoring);
    
    if (monitoring && typeof monitoring.recordFileAction === 'function') {
      console.log('‚úÖ recordFileAction disponible');
    } else {
      console.log('‚ö†Ô∏è recordFileAction no disponible (esperado)');
    }
    
  } catch (error) {
    console.log('‚ö†Ô∏è Import de monitoring fall√≥ (esperado en entorno de prueba):', error.message);
  }

  console.log('\nüéâ Pruebas finales completadas');
}

// Ejecutar pruebas
testFileServiceFinalFixes().catch(console.error); 