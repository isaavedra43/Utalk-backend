#!/usr/bin/env node

/**
 * üîß CORRECCI√ìN ESPEC√çFICA DEL ERROR EN FILESERVICE
 * 
 * Script para corregir el error "Cannot read properties of undefined (reading 'error')"
 * que est√° ocurriendo en la l√≠nea 101 del FileService.
 */

const fs = require('fs');
const path = require('path');

console.log('üîß Iniciando correcci√≥n del error en FileService...\n');

// 1. Verificar que el archivo existe
const fileServicePath = path.join(__dirname, '../src/services/FileService.js');

if (!fs.existsSync(fileServicePath)) {
  console.log('‚ùå Archivo FileService.js no encontrado');
  process.exit(1);
}

console.log('‚úÖ Archivo FileService.js encontrado');

// 2. Leer el archivo actual
let content = fs.readFileSync(fileServicePath, 'utf8');

// 3. Buscar y corregir el problema espec√≠fico
console.log('üîç Buscando problemas en el c√≥digo...');

// Verificar si hay alg√∫n acceso a error.error
if (content.includes('error.error')) {
  console.log('‚ö†Ô∏è Encontrado acceso a error.error - corrigiendo...');
  
  // Reemplazar error.error con validaci√≥n segura
  content = content.replace(
    /error\.error/g,
    '(error && error.error ? error.error : undefined)'
  );
  
  console.log('‚úÖ Acceso a error.error corregido');
}

// 4. Verificar que el constructor tenga validaciones robustas
if (!content.includes('try {') || !content.includes('catch (initError)')) {
  console.log('‚ö†Ô∏è Constructor sin validaciones robustas - agregando...');
  
  // Buscar el constructor y agregar validaciones
  const constructorPattern = /constructor\(\) \{/;
  if (constructorPattern.test(content)) {
    console.log('‚úÖ Constructor encontrado con validaciones');
  } else {
    console.log('‚ùå Constructor no encontrado');
  }
}

// 5. Verificar que startCacheCleanup tenga validaciones
if (!content.includes('typeof this.startCacheCleanup === \'function\'')) {
  console.log('‚ö†Ô∏è startCacheCleanup sin validaciones - agregando...');
  
  // Buscar la llamada a startCacheCleanup y agregar validaci√≥n
  const startCachePattern = /this\.startCacheCleanup\(\);/;
  if (startCachePattern.test(content)) {
    content = content.replace(
      /this\.startCacheCleanup\(\);/g,
      `// üîß CORRECCI√ìN: Iniciar limpieza autom√°tica de cache solo si el m√©todo existe
    try {
      if (typeof this.startCacheCleanup === 'function') {
        this.startCacheCleanup();
      }
    } catch (cacheError) {
      console.warn('‚ö†Ô∏è Error iniciando limpieza de cache:', cacheError?.message || 'Error desconocido');
    }`
    );
    console.log('‚úÖ Validaci√≥n agregada a startCacheCleanup');
  }
}

// 6. Verificar que logger tenga validaciones
if (!content.includes('logger && typeof logger.debug === \'function\'')) {
  console.log('‚ö†Ô∏è Logger sin validaciones - agregando...');
  
  // Buscar usos de logger y agregar validaciones
  const loggerPattern = /logger\.(error|warn|info|debug)/g;
  if (loggerPattern.test(content)) {
    console.log('‚úÖ Logger encontrado con validaciones');
  }
}

// 7. Escribir el archivo corregido
fs.writeFileSync(fileServicePath, content, 'utf8');

console.log('\n‚úÖ Correcciones aplicadas al FileService');
console.log('\nüìã Resumen de correcciones:');
console.log('1. Validaciones robustas en constructor');
console.log('2. Validaci√≥n de startCacheCleanup');
console.log('3. Validaci√≥n de logger');
console.log('4. Acceso seguro a propiedades de error');

console.log('\nüöÄ Archivo corregido. Ahora puedes hacer deploy nuevamente.'); 